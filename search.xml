<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue优化之代码层面的优化</title>
      <link href="2020/11/19/vue-you-hua-zhi-dai-ma-ceng-mian-de-you-hua/"/>
      <url>2020/11/19/vue-you-hua-zhi-dai-ma-ceng-mian-de-you-hua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Vue 框架通过数据双向绑定和虚拟 DOM 技术，帮我们处理了前端开发中最脏最累的 DOM 操作部分， 我们不再需要去考虑如何操作 DOM 以及如何最高效地操作 DOM；但 Vue 项目中仍然存在项目首屏优化、Webpack 编译配置优化等问题，所以我们仍然需要去关注 Vue 项目性能方面的优化，使项目具有更高效的性能、更好的用户体验。</p></blockquote><h2 id="代码层面的优化"><a href="#代码层面的优化" class="headerlink" title="代码层面的优化"></a>代码层面的优化</h2><p>在vue中，有很多的功能相似，有略微区别的代码，正确的在使用场景下使用适合它的元素，会让代码运行的更加丝滑</p><h4 id="1-1-v-if和v-show使用场景"><a href="#1-1-v-if和v-show使用场景" class="headerlink" title="1.1 v-if和v-show使用场景"></a>1.1 v-if和v-show使用场景</h4><p><strong>v-if</strong> 是 <strong>真正</strong> 的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p><strong>v-show</strong> 就简单得多， 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 display 属性进行切换。</p><p>所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。</p><blockquote><p>比如，你的电脑</p><p>v-if就等于是你完全的将他关闭了，需要用时，再将他打开</p><p>v-show相当于是睡眠模式，他始终都开着，只是你看不到</p></blockquote><hr><h4 id="1-2-computed和watch使用场景"><a href="#1-2-computed和watch使用场景" class="headerlink" title="1.2 computed和watch使用场景"></a>1.2 computed和watch使用场景</h4><p><strong>computed：</strong> 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed  的值；</p><blockquote><p>简单来说就是，对计算结果会进行缓存，如果原始数据不改变，不需要重新计算，直接从缓存中读取结果</p><p>但是，方法必须有返回值，减少计算量，牺牲空间，来换取时间，对一些复杂的运算，使用计算属性会非常的有效率</p></blockquote><blockquote><p>假如，你经常的在一家商店购买十箱苹果， 在普通的函数计算中，需要每次取出苹果价格和数量，在计算属性中，只要你价格和数量没变化，就不需要计算，只需要从缓存中取值就好了</p></blockquote><p><strong>watch：</strong> 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p><blockquote><p>监听属性简单来说就是数据一旦发生改变，会自动触发执行，watch属性中的对应的函数</p><p>如果函数中，有两个参数 a和b，a就是修改之后的新值，b是修改之前的旧值</p></blockquote><p>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p><hr><h4 id="1-3-v-for遍历必须为item添加key，且避免同时使用v-if"><a href="#1-3-v-for遍历必须为item添加key，且避免同时使用v-if" class="headerlink" title="1.3 v-for遍历必须为item添加key，且避免同时使用v-if"></a>1.3 v-for遍历必须为item添加key，且避免同时使用v-if</h4><ul><li><p>在列表数据进行遍历渲染时，需要为每一项 item 设置唯一 key 值，方便 <code>Vue</code>内部机制精准找到该条列表数据。当 状态更新时，新的状态值和旧的状态值对比，较快地定位到这个循环 。</p></li><li><p>v-for 比 v-if 优先级高，如果每一次都需要遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候，必要情况下应该替换成 computed 属性。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 推荐</span><span class="token operator">&lt;</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span>li    v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"user in activeUsers"</span>    <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"user.id"</span><span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> user<span class="token punctuation">.</span>name <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>computed<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  activeUsers<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> user<span class="token punctuation">.</span>isActive    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不推荐</span><span class="token operator">&lt;</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span>li    v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"user in users"</span>    v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"user.isActive"</span>    <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"user.id"</span><span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> user<span class="token punctuation">.</span>name <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre></li></ul><hr><h4 id="1-4-长列表性能的优化"><a href="#1-4-长列表性能的优化" class="headerlink" title="1.4 长列表性能的优化"></a>1.4 长列表性能的优化</h4><blockquote><p>Vue 会通过 Object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要 Vue 来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，那如何禁止 Vue 劫持我们的数据呢？可以通过 Object.freeze 方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    users<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/api/users"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>users <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><hr><h4 id="1-5-事件的销毁"><a href="#1-5-事件的销毁" class="headerlink" title="1.5 事件的销毁"></a>1.5 事件的销毁</h4><blockquote><p>Vue 组件销毁时，会自动清理它与其它实例的连接，解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。 如果在 js 内使用 addEventListene 等方式是不会自动销毁的，我们需要在组件销毁时手动移除这些事件的监听，以免造成内存泄露</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>click<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>click<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h4 id="1-6-图片懒加载"><a href="#1-6-图片懒加载" class="headerlink" title="1.6 图片懒加载"></a>1.6 图片懒加载</h4><p>对于图片过多的页面，为了加速页面的加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载，等到滚动到可视区域再去加载，这样对于页面加载性能上会有很大的提升，也提高了用户体验。我们在项目中使用 Vue 的 vue-lazyload 插件</p><ol><li><p>安装插件</p><pre class=" language-javascript"><code class="language-javascript">npm install vue<span class="token operator">-</span>lazyload <span class="token operator">--</span>save<span class="token operator">-</span>dev</code></pre></li><li><p>在入口文件main.js中引入并使用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> VueLazyload <span class="token keyword">from</span> <span class="token string">'vue-lazyload'</span></code></pre></li><li><p>在vue中直接使用</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueLazyload<span class="token punctuation">)</span></code></pre><p>或者添加自定义选项</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueLazyload<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>preLoad<span class="token punctuation">:</span> <span class="token number">1.3</span><span class="token punctuation">,</span>error<span class="token punctuation">:</span> <span class="token string">'dist/error.png'</span><span class="token punctuation">,</span>loading<span class="token punctuation">:</span> <span class="token string">'dist/loading.gif'</span><span class="token punctuation">,</span>attempt<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></li><li><p>在 vue 文件中将 img 标签的 :src 属性直接改为 v-lazy ，从而将图片显示方式更改为懒加载显示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-lazy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/img/1.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ol><hr><h4 id="1-7-提取公共代码"><a href="#1-7-提取公共代码" class="headerlink" title="1.7 提取公共代码"></a>1.7 提取公共代码</h4><blockquote><p>一个项目，不可能只有一个页面，而多个页面中，有相同资源的，重复加载会浪费用户的流量和服务器的成本，每个页面的加载资源太大，导致网页加载缓慢，影响用户体验</p><p>所以，我们需要提取公共的代码，抽离成单独的文件，以组件的方式在页面中灵活运用，组件间的应用，请参考<a href="https://god_hearing.gitee.io/myhexo/2020/10/30/vue-zu-jian/">这里</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊天机器人</title>
      <link href="2020/11/16/liao-tian-ji-qi-ren/"/>
      <url>2020/11/16/liao-tian-ji-qi-ren/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是聊天机器人"><a href="#什么是聊天机器人" class="headerlink" title="什么是聊天机器人"></a>什么是聊天机器人</h2><blockquote><p>好吧其实没什么好解释的，就是能够一天二十四小时陪伴你到老的机器人，具有一定的学习能力，越来越像人，让你在没人陪的时候也能有人聊聊天解解闷</p></blockquote><p>由于我还不太熟悉花里胡哨的机器学习，虽然对这方面有着很大的兴趣，但是奈何需要一定的门槛，不过没关系，我们可以先做一个调包侠</p><p>这篇教程，让我们一起用python来实现三款免费而且好用的机器人</p><p>从最简单的青云客开始吧</p><h2 id="青云客"><a href="#青云客" class="headerlink" title="青云客"></a>青云客</h2><p>首先呢，青云客可谓是相当的简单了，也不需要注册，不需要登录，直接上代码吧</p><pre class=" language-python"><code class="language-python">url <span class="token operator">=</span> <span class="token string">'http://api.qingyunke.com/api.php?key=free&amp;appid=0&amp;msg=%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">'你好呀'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><blockquote><p>唯一需要注意的一点是，中文在url里，必须得转码，避免报错的可能，使用urllib</p></blockquote><h2 id="微软小冰"><a href="#微软小冰" class="headerlink" title="微软小冰"></a>微软小冰</h2><blockquote><p>微软小冰是领先的跨平台人工智能机器人。微软小冰注重人工智能在拟合人类情商维度的发展，强调人工智能情商，而非任务完成在人机交互中的基础价值。</p></blockquote><p>首先需要先领养小冰，通过微博关注小冰，然后给她发个消息</p><img src="/2020/11/16/liao-tian-ji-qi-ren/image-20201116200835343.png" class><p>领养完成之后，按F12打开调试窗口，通过<code>chat/</code>里的Cookie，找到SUB值，注意不要手动退出，手动退出会刷新SUB的</p><img src="/2020/11/16/liao-tian-ji-qi-ren/image-20201116200959106.png" class><p>之后，随便再发一条消息，找到<code>new.json</code>数据包，找到uid和source</p><img src="/2020/11/16/liao-tian-ji-qi-ren/image-20201116201243607.png" class><p>最后构造参数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">xiaobing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    uid <span class="token operator">=</span> <span class="token string">'你的uid'</span>    source <span class="token operator">=</span> <span class="token string">'你的source'</span>    SUB <span class="token operator">=</span> <span class="token string">'你的SUB'</span>    url_send <span class="token operator">=</span> <span class="token string">'https://api.weibo.com/webim/2/direct_messages/new.json'</span>    data <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'text'</span><span class="token punctuation">:</span> 你要说的话<span class="token punctuation">,</span>        <span class="token string">'uid'</span><span class="token punctuation">:</span> uid<span class="token punctuation">,</span>        <span class="token string">'source'</span><span class="token punctuation">:</span> source    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    headers <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'cookie'</span><span class="token punctuation">:</span> <span class="token string">'SUB='</span><span class="token operator">+</span>SUB<span class="token punctuation">,</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36'</span><span class="token punctuation">,</span>        <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://api.weibo.com/chat/'</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_send<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    sendMsg <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        url_get <span class="token operator">=</span> <span class="token string">'https://api.weibo.com/webim/2/direct_messages/conversation.json?uid=&amp;#123;&amp;#125;&amp;source=&amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>uid<span class="token punctuation">,</span> source<span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url_get<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        getMsg <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">'direct_messages'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> sendMsg <span class="token operator">==</span> getMsg<span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> getMsg</code></pre><p>也是调包侠的日常，没啥难度</p><h2 id="腾讯闲聊"><a href="#腾讯闲聊" class="headerlink" title="腾讯闲聊"></a>腾讯闲聊</h2><p> 这个也和小冰类似</p><p>先创建应用</p><img src="/2020/11/16/liao-tian-ji-qi-ren/image-20201116201602855.png" alt="image-20201116201602855" style="zoom:50%;"><p>拿到ID和KEY</p><img src="/2020/11/16/liao-tian-ji-qi-ren/image-20201116201641496.png" alt="image-20201116201641496" style="zoom:50%;"><p>欧克，准备工作完成，上代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">tencent</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    APPID <span class="token operator">=</span> <span class="token string">'123'</span>    APPKEY <span class="token operator">=</span> <span class="token string">'123'</span>    url <span class="token operator">=</span> <span class="token string">'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'</span>    params <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'app_id'</span><span class="token punctuation">:</span> APPID<span class="token punctuation">,</span>        <span class="token string">'time_stamp'</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'session'</span><span class="token punctuation">:</span> <span class="token string">'10000'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'question'</span><span class="token punctuation">:</span> msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    sign_before <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 键值拼接过程value部分需要URL编码，URL编码算法用大写字母，例如%E8。quote默认大写。</span>        sign_before <span class="token operator">+=</span> <span class="token string">'&amp;#123;&amp;#125;=&amp;#123;&amp;#125;&amp;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>key<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将应用密钥以app_key为键名，拼接到字符串sign_before末尾</span>    sign_before <span class="token operator">+=</span> <span class="token string">'app_key=&amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>APPKEY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对字符串sign_before进行MD5运算，得到接口请求签名</span>    sign <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>sign_before<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    params<span class="token punctuation">[</span><span class="token string">'sign'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sign    <span class="token comment" spellcheck="true"># print(params)</span>    html <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> html<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'answer'</span><span class="token punctuation">]</span>msg<span class="token operator">=</span> <span class="token string">'我好看吗'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原话>>"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>res <span class="token operator">=</span> tencent<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"腾讯>>"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库自定义字段</title>
      <link href="2020/11/15/shu-ju-ku-zi-ding-yi-zi-duan/"/>
      <url>2020/11/15/shu-ju-ku-zi-ding-yi-zi-duan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在以往的数据库使用中，我们通常在一个数据库里操作某些表，如果有很多字段不同但目的相同的表，则需要建立很多的表来完成需求，这时候，可以通过在一个字段里添加多个数据来实现</p></blockquote><blockquote><p>比如，工单的创建，假如有请假，外购两个工单，请假需要的字段为请假时间，请假理由，而外购的工单需要价格，理由，而两个工单的审批人也都不同，但是，要求两张工单都在同一张表里</p><p>相信很多入门的程序猿到这里已经要提刀砍人了，难道要把两个工单的全部字段建出来，然后根据不同的工单来添加哪些数据，不添加哪些数据吗？</p></blockquote><p>是的，上面的也是一个办法，但是，这样除了效率和辨识度的问题，还有一个最重要的问题就是，low</p><p>简单的来画个图吧</p><img src="/2020/11/15/shu-ju-ku-zi-ding-yi-zi-duan/sss.png" class><p>建立这样一张表，的确能够满足需求，只需要在创建外购的时候，请假的两个字段不填就好了(请忽略这张比较low的表)</p><p>而如果使用了自定义字段，就会是这样</p><img src="/2020/11/15/shu-ju-ku-zi-ding-yi-zi-duan/image-20201115215841546.png" class><p>怎么样，是不是简便的多了，只需要在取出该条数据的时候，多一个自定义字段的解析罢了，而且还节省空间和性能(请再次忽略这张low图)</p><p>推荐使用json数据类型储存自定义字段，这样无论是使用哪种语言来实现这项需求，都非常的简单</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABAC权限模型</title>
      <link href="2020/11/15/abac-quan-xian-mo-xing/"/>
      <url>2020/11/15/abac-quan-xian-mo-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ABAC权限模型，是基于属性的权限模型，ABAC通过动态计算一个或一组属性来满足某种条件来进行授权判断(可以编写简单的逻辑)，属性通常来说分为四类，用户属性(例如年龄，性别等)，环境属性(比如时间，地点)，操作属性(比如读取)，对象属性(如一篇文章，又称为资源属性),所以理论上能够实现非常灵活的控制权限,几乎能满足所有类型的需求</p></blockquote><p>例如规则：“允许所有班主任在上课时间自由进出校门”这条规则，其中，“班主任”是用户的角色属性，“上课时间”是环境属性，“进出”是操作属性，而“校门”就是对象属性了。为了实现便捷的规则设置和规则判断执行，ABAC通常有配置文件（XML、YAML等）或DSL配合规则解析引擎使用。XACML（eXtensible Access Control Markup Language）是ABAC的一个实现，但是该设计过于复杂，我还没有完全理解，故不做介绍。</p><hr><p>总结一下，ABAC有如下特点</p><ol><li>集中化管理</li><li>可以按需求实现不同颗粒度的权限控制</li><li>不需要预定以判断逻辑，减轻了权限系统的维护成本，特别是需求经常变化的系统中</li><li>定义权限时，不能直观的看出用户和对象间的关系</li><li>规则如果稍微复杂一点，或者设计混乱，就会给管理者维护和追查带来麻烦</li><li>权限判断需要实时执行，规则过多会导致性能问题</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Restful风格接口</title>
      <link href="2020/11/15/restful-feng-ge-jie-kou/"/>
      <url>2020/11/15/restful-feng-ge-jie-kou/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是restful风格API"><a href="#什么是restful风格API" class="headerlink" title="什么是restful风格API"></a>什么是restful风格API</h2><blockquote><p>网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现<code>API First</code>的设计思想。<code>RESTful API</code>是目前比较成熟的一套互联网应用程序的API设计理论。</p></blockquote><hr><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>API与用户的通信协议，总是使用<strong>HTTPS</strong>协议</p><hr><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>应该尽量将API部署在专用域名之下，如何确定API很简单，不会有进一步扩展，可以考虑在主域名下</p><hr><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>应该将API的版本号放在URL中，另一个做法是，将版本号放在http头信息中，但不如放在url方便和直观</p><hr><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><p>路径又称为终点，代表了API的具体网址，每个网址代表一种资源，所以网址中不能有动词，只能有名词，而且所用的名词往往和数据库的表格名相互对应，一般来说，每个数据库中的表都是同种记录的集合，所以API中的名词也要使用复数</p><p>举个栗子：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#  有一个API提供商品信息</span>https<span class="token punctuation">:</span><span class="token operator">//</span>api<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>v1<span class="token operator">/</span>goodshttps<span class="token punctuation">:</span><span class="token operator">//</span>api<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>v1<span class="token operator">/</span>categorys</code></pre><hr><h4 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP动词</h4><p>对于资源的具体操作类型， 由HTTP动词表示</p><pre class=" language-python"><code class="language-python">GET<span class="token punctuation">(</span>SELECT<span class="token punctuation">)</span><span class="token punctuation">:</span>从服务器中取出资源<span class="token punctuation">(</span>一项或多项<span class="token punctuation">)</span>POST<span class="token punctuation">(</span>CREATE<span class="token punctuation">)</span><span class="token punctuation">:</span>在服务器新建一个资源PUT<span class="token punctuation">(</span>UPDATE<span class="token punctuation">)</span><span class="token punctuation">:</span>在服务器更新资源<span class="token punctuation">(</span>客户端提供改变后的完整资源<span class="token punctuation">)</span>PATCH<span class="token punctuation">(</span>UPDATE<span class="token punctuation">)</span><span class="token punctuation">:</span>在服务器更新资源<span class="token punctuation">(</span>客户端提供改变的属性<span class="token punctuation">)</span>DELETE<span class="token punctuation">(</span>DELETE<span class="token punctuation">)</span><span class="token punctuation">:</span>从服务器删除资源HEAD<span class="token punctuation">:</span>获取资源的元数据    OPTIONS<span class="token punctuation">:</span>获取信息，关于资源的哪些属性是客户端可以改变的</code></pre><p>拿上边的商品信息举例子</p><pre class=" language-python"><code class="language-python">GET <span class="token operator">/</span>goods<span class="token punctuation">:</span>列出所有商品POST <span class="token operator">/</span>goods<span class="token punctuation">:</span>新建商品GET <span class="token operator">/</span>goods<span class="token operator">/</span>ID<span class="token punctuation">:</span>获取某个指定商品的信息PUT <span class="token operator">/</span>goods<span class="token operator">/</span>ID<span class="token punctuation">:</span>更新某个指定商品的信息<span class="token punctuation">(</span>全部信息<span class="token punctuation">)</span>PATCH <span class="token operator">/</span>goods<span class="token operator">/</span>ID<span class="token punctuation">:</span>更新某个商品的信息<span class="token punctuation">(</span>部分信息<span class="token punctuation">)</span>DELETE <span class="token operator">/</span>goods<span class="token operator">/</span>ID<span class="token punctuation">:</span>删除某个商品GET <span class="token operator">/</span>categorys<span class="token operator">/</span>ID<span class="token operator">/</span>good<span class="token punctuation">:</span>列出商品类ID下所有商品DELETE <span class="token operator">/</span>categorys<span class="token operator">/</span>ID<span class="token operator">/</span>good<span class="token operator">/</span>ID<span class="token punctuation">:</span>删除某个指定商品类下的某个指定商品</code></pre><hr><h4 id="过滤信息"><a href="#过滤信息" class="headerlink" title="过滤信息"></a>过滤信息</h4><p>如果记录数量很多，服务器不可能都将它们返回给用户，API应该提供参数，过滤返回结果</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span>limit<span class="token operator">=</span><span class="token number">10</span>：指定返回记录的数量<span class="token operator">?</span>offset<span class="token operator">=</span><span class="token number">10</span>：指定返回记录的开始位置。<span class="token operator">?</span>page<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>per_page<span class="token operator">=</span><span class="token number">100</span>：指定第几页，以及每页的记录数。<span class="token operator">?</span>sortby<span class="token operator">=</span>name<span class="token operator">&amp;</span>order<span class="token operator">=</span>asc：指定返回结果按照哪个属性排序，以及排序顺序。<span class="token operator">?</span>animal_type_id<span class="token operator">=</span><span class="token number">1</span>：指定筛选条件</code></pre><blockquote><p>参数的设计允许存在冗余，即允许<code>API</code>路径和URL参数偶尔有重复。比如，<code>GET /categorys/ID/goods</code> 与 <code>GET /goods?categorys_id=ID</code> 的含义是相同的。</p></blockquote><hr><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><blockquote><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token number">200</span> OK <span class="token operator">-</span> <span class="token punctuation">[</span>GET<span class="token punctuation">]</span>：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。<span class="token number">201</span> CREATED <span class="token operator">-</span> <span class="token punctuation">[</span>POST<span class="token operator">/</span>PUT<span class="token operator">/</span>PATCH<span class="token punctuation">]</span>：用户新建或修改数据成功。<span class="token number">202</span> Accepted <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span>：表示一个请求已经进入后台排队（异步任务）<span class="token number">204</span> NO CONTENT <span class="token operator">-</span> <span class="token punctuation">[</span>DELETE<span class="token punctuation">]</span>：用户删除数据成功。<span class="token number">400</span> INVALID REQUEST <span class="token operator">-</span> <span class="token punctuation">[</span>POST<span class="token operator">/</span>PUT<span class="token operator">/</span>PATCH<span class="token punctuation">]</span>：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。<span class="token number">401</span> Unauthorized <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span>：表示用户没有权限（令牌、用户名、密码错误）。<span class="token number">403</span> Forbidden <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> 表示用户得到授权（与<span class="token number">401</span>错误相对），但是访问是被禁止的。<span class="token number">404</span> NOT FOUND <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span>：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。<span class="token number">406</span> Not Acceptable <span class="token operator">-</span> <span class="token punctuation">[</span>GET<span class="token punctuation">]</span>：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。<span class="token number">410</span> Gone <span class="token operator">-</span><span class="token punctuation">[</span>GET<span class="token punctuation">]</span>：用户请求的资源被永久删除，且不会再得到的。<span class="token number">422</span> Unprocesable entity <span class="token operator">-</span> <span class="token punctuation">[</span>POST<span class="token operator">/</span>PUT<span class="token operator">/</span>PATCH<span class="token punctuation">]</span> 当创建一个对象时，发生一个验证错误。<span class="token number">500</span> INTERNAL SERVER ERROR <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span>：服务器发生错误，用户将无法判断发出的请求是否成功。</code></pre><hr><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>如果状态码是<code>4xx</code>，就应该向用户返回出错信息，一般来说，返回的信息中将error作为键名，出错信息作为键值即可</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"error"</span><span class="token operator">:</span><span class="token string">"Invalid API key"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><p>针对不同操作，服务器向用户返回的结果应该符合以下规范</p><pre class=" language-python"><code class="language-python">GET <span class="token operator">/</span>collection：返回资源对象的列表（数组）GET <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回单个资源对象POST <span class="token operator">/</span>collection：返回新生成的资源对象PUT <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回完整的资源对象PATCH <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回完整的资源对象DELETE <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回一个空文档</code></pre><hr><h4 id="面向文档"><a href="#面向文档" class="headerlink" title="面向文档"></a>面向文档</h4><p>RESTful API最好做到面向文档，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么，比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"link": &amp;#123;</span>  <span class="token string">"rel"</span><span class="token punctuation">:</span>   <span class="token string">"collection https://www.example.com/goods"</span><span class="token punctuation">,</span>  <span class="token string">"href"</span><span class="token punctuation">:</span>  <span class="token string">"https://api.example.com/goods"</span><span class="token punctuation">,</span>  <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"List of goods"</span><span class="token punctuation">,</span>  <span class="token string">"type"</span><span class="token punctuation">:</span>  <span class="token string">"application/vnd.yourformat+json"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;&amp;#125;</span>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</code></pre><hr><p>所以，API有四个级别，分别为：</p><pre class=" language-python"><code class="language-python">level <span class="token number">0</span> ：面向过程，只是把HTTP当做一个传输的通道，没有把HTTP当做一种传输协议level <span class="token number">1</span>：面向资源，通过参数判断level <span class="token number">2</span>：面向标签，真正将HTTP作为了一种传输协议，最直观的一点就是Level2使用了HTTP动词，GET<span class="token operator">/</span>PUT<span class="token operator">/</span>POST<span class="token operator">/</span>DELETE<span class="token operator">/</span>PATCH<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>这些都是HTTP的规范level <span class="token number">3</span>：面向文档<span class="token punctuation">,</span>使用者只需要知道如何获取资源的入口，之后的每个URI都可以通过请求获得，无法获得就说明无法执行那个请求</code></pre><p>所以，我们写API时，要朝着最高级别迈进，才能逐渐的成长起来</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="2020/11/15/gong-han-mo-shi/"/>
      <url>2020/11/15/gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是工厂模式"><a href="#什么是工厂模式" class="headerlink" title="什么是工厂模式"></a>什么是工厂模式</h2><blockquote><p>所谓的工厂模式，是设计模式中比较常用的，这种类型的设计模式</p><p>在这种模式下，不会暴露创建逻辑，只是通过某个标识来确定实例化哪个工厂实例</p><p>简单的举个例子，如果你要买一辆汽车，不用知道他是怎样做出来的，只需要把参数传递进去，到时候来提车就好了。</p><p>无论是车还是什么，都不用管工厂内部是怎样实现的，只需要将参数传进去就可以</p></blockquote><p>工厂模式从简到难，分为简单工厂模式，工厂方法模式以及抽象工厂模式</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂模式其实并不算是一种设计模式，更多的时候更像是一种编程习惯</p><blockquote><p>定义一个工厂类，根据传入的参数返回不同的实例，被创建的实例具有共同的父类或接口</p><p>现实生活中，工厂是负责生产产品的；同样在设计模式中，简单工厂模式我们可以理解为负责生产对象的一个类，称为“工厂类”。</p></blockquote><p>再举个栗子，假如，你要生产瓶子，客户说要什么样的瓶子，你就拿着这个瓶子的参数，去该瓶子的生产车间去取。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义三个具体的工厂，他们用来生产具体的东西</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'A瓶子'</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'B瓶子'</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'C瓶子'</span><span class="token comment" spellcheck="true"># 工厂类</span><span class="token keyword">class</span> <span class="token class-name">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">example</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token operator">==</span><span class="token string">'A'</span><span class="token punctuation">:</span>            s <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">:</span>            s <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span>            s <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span>w <span class="token operator">=</span> factory<span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>example<span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span></code></pre><p>可以看到，只需要在工厂<code>factory</code>中，传入你想要什么瓶子，他就可以通过内部方法实例化某个工厂，从而达到你想要的某个东西</p><hr><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote><p>工厂方法模式，又称工厂模式、多态工厂模式和虚拟构造器模式，通过定义工厂父类负责定义创建对象的公共接口，而子类则负责生成具体的对象。</p><p>以上面的例子为例，假如要再多一个D瓶子，除了要新建一个D类，还要修改工厂类中的代码，这样就违背了软件设计中的开闭原则，即再扩展新的类时，尽量不要修改原有的代码</p></blockquote><p>说的再简单点，就是工厂类被具体的工厂继承</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 工厂类</span><span class="token keyword">class</span> <span class="token class-name">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">example</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'A瓶子'</span>    <span class="token keyword">def</span> <span class="token function">example</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'B瓶子'</span>    <span class="token keyword">def</span> <span class="token function">example</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'C瓶子'</span>    <span class="token keyword">def</span> <span class="token function">example</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'D瓶子'</span>    <span class="token keyword">def</span> <span class="token function">example</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 无论你加了多少个工厂，只需要实例化对应的那个具体工厂</span>w <span class="token operator">=</span> D<span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>example<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这样做的好处就是，在工厂类里，无需改动任何代码，只需要在需要的时候实例化某个具体工厂即可，便于维护</p><hr><h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><blockquote><p>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。</p><p>抽象工厂模式中有工厂和产品簇的概念。而一簇的产品都是成套出现的。比如现在要给每个士兵发一套武器，包括枪和子弹。步枪和步枪子弹，手枪和手枪子弹。生产步枪的工厂就是步枪工厂，而生产手枪的工厂就是手枪工厂。步枪工厂和手枪工厂都是工厂，这就是一种抽象工厂的例子</p></blockquote><p>用一个简单的代码来实现:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> abc<span class="token comment" spellcheck="true"># 工厂类</span><span class="token keyword">class</span> <span class="token class-name">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">Rifle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">Pistol</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># M4工厂</span><span class="token keyword">class</span> <span class="token class-name">M4</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">Rifle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> M4Rifle<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">Pistol</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> M4Pistol<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># AK工厂</span><span class="token keyword">class</span> <span class="token class-name">AK</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">Rifle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AKRifle<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">Pistol</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AKPistol<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># M4工厂</span><span class="token keyword">class</span> <span class="token class-name">M4Rifle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'M4A1步枪'</span><span class="token keyword">class</span> <span class="token class-name">M4Pistol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'M4A1手枪'</span><span class="token keyword">class</span> <span class="token class-name">AKRifle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'AK47步枪'</span><span class="token keyword">class</span> <span class="token class-name">AKPistol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'AK47手枪'</span>w <span class="token operator">=</span> M4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Rifle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span></code></pre><blockquote><p>进入工厂类，无论是要AK系列的，还是<code>M4</code>系列的，都只实例化那个类就可以了，因为，无论是<code>M4</code>还是AK都能生产该类的手枪和步枪</p><p>虽然我也不知道他们是不是生产手枪</p></blockquote><p>嗯…再画个图吧，low归low，但比较好理解</p><img src="/2020/11/15/gong-han-mo-shi/20201115120419234.png" style="zoom:70%;">]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊天室</title>
      <link href="2020/11/12/liao-tian-shi/"/>
      <url>2020/11/12/liao-tian-shi/</url>
      
        <content type="html"><![CDATA[<p>最近，在写一个简单的基于websocket和django的聊天室，来分享一下我这个过程</p><ul><li><p>首先是思路，聊天室说起来简单，但实际操作起来完全不是那么回事了，除了简单的连接之外，完全没有一点头绪</p><blockquote><p>把聊天室的功能梳理了一下，然后拆开，分成了前端连接，前端发送，后端连接，实时推送消息，记录保存这五个方面</p></blockquote></li><li><p>先来说一说前端连接的问题，其实也就是一个简单的<code>websocket</code>连接，不过是增加了一个断开重连</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">websocketlink</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'WebSocket'</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//  生成websocket链接</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'支持'</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://192.168.1.157:8000/chat_room_websocket/?uid='</span><span class="token operator">+</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// var ws = new WebSocket('ws://192.168.1.157:8000/chat_room_websocket/');</span>      <span class="token comment" spellcheck="true">// 连接成功</span>      ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 收到数据</span>      ws<span class="token punctuation">.</span>onmessage<span class="token operator">=</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将获取信息打印</span>        <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data        <span class="token keyword">this</span><span class="token punctuation">.</span>msglist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>received_msg<span class="token punctuation">)</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 连接关闭</span>      ws<span class="token punctuation">.</span>onclose<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'链接已关闭'</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">websocketlink</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'uid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 连接报错</span>      ws<span class="token punctuation">.</span>error<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">websocketlink</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'uid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>这里，我把连接封装起来，在报错或者关闭时，重新连接</p></blockquote></li><li><p>页面操作上，点击按钮，发送消息，这都是简单的请求<code>API</code>接口的操作，这里就不多详述了</p></li><li><p>后端连接，也是一个简单的<code>dwebsocket</code>连接</p><pre class=" language-python"><code class="language-python">clients <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span><span class="token comment" spellcheck="true"># 链接websocket接口</span>@accept_websocket<span class="token keyword">def</span> <span class="token function">chat_room_websocket</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            message <span class="token operator">=</span> request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> message<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 连接的用户的id</span>                uid <span class="token operator">=</span> message<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 加入到字典中</span>                clients<span class="token punctuation">[</span>uid<span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>websocket</code></pre><blockquote><p>和之前一样，定义公共变量，将连接的id和连接对象放进去</p></blockquote></li><li><p>存储，发送消息不难，存储其实也不难，无论是存到mysql还是redis还是文件都可以自行选择，这里，我存的是自己的文件，根据用户的id生成文件，时间戳+消息追加性的存储</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 时间戳，毫秒，为了之后取消息记录，做一下准备</span>t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>timestamp1 <span class="token operator">=</span> int<span class="token punctuation">(</span>round<span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 加个换行，直接存</span>s <span class="token operator">=</span> str<span class="token punctuation">(</span>timestamp1<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'chat_record/%s.txt'</span> <span class="token operator">%</span> uid<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre></li><li><p>实时推送消息，如果有人在聊天室发了消息，却看不到，这就非常的伤脑筋，为了实现简单的推送消息，将公共变量中的所有连接，遍历一下，然后发送给所有人</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 遍历所有的连接用户</span><span class="token keyword">for</span> client <span class="token keyword">in</span> clients<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造返回数据，需要编一下码</span>    message <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'username':username,'msg':msg&amp;#125;,ensure_ascii=False)</span>    <span class="token comment" spellcheck="true"># 发送消息</span>    clients<span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>后端推送，这里我是传了图片，为了更加的人性化。只发文字不发图片的聊天室是没有灵魂的</p><blockquote><p>另外，我做了一个<code>redis</code>限流，这个可以忽略不计</p><p>另外的另外， 因为我前端稀碎， 有些多余的代码可以自行过滤一下</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SendMessage</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 传图片和发送消息是两个接口，所以，获取用户id的方法也不一样，这里写的多余了</span>        msg <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">)</span>        uid <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'uid'</span><span class="token punctuation">)</span>        image <span class="token operator">=</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> image<span class="token punctuation">:</span>            uid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'uid'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># redis限流</span>        redis_client <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'chat_room'</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            redis_client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>uid<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code': 1001, 'msg': '发送频繁'&amp;#125;)</span>        redis_client<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span>uid<span class="token punctuation">,</span><span class="token string">'num'</span><span class="token punctuation">)</span>        redis_client<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>uid<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 这里的名字是根据连接查了一下数据库，可以忽略</span>        username <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id<span class="token operator">=</span>uid<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>username        <span class="token comment" spellcheck="true"># 如果要获取两个人的聊天记录，在创建文件时，可以用两个人的id来组成文件名</span>        <span class="token comment" spellcheck="true"># 构造时间戳</span>        t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        timestamp1 <span class="token operator">=</span> int<span class="token punctuation">(</span>round<span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 如果传的是消息，发送消息顺便存储到本地</span>        <span class="token keyword">if</span> msg<span class="token punctuation">:</span>            <span class="token keyword">for</span> client <span class="token keyword">in</span> clients<span class="token punctuation">:</span>                message <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'username':username,'msg':msg&amp;#125;,ensure_ascii=False)</span>                clients<span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> str<span class="token punctuation">(</span>timestamp1<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">'\n'</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'chat_record/%s.txt'</span> <span class="token operator">%</span> uid<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 写图片文件,如果传了文件，则写入到文件中，然后拼接一个url返回</span>        <span class="token keyword">elif</span> image<span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>CHAT_RECORD_ROOT<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                <span class="token keyword">for</span> chunk <span class="token keyword">in</span> image<span class="token punctuation">.</span>chunks<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>                message <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'username': username, 'msg':('http://192.168.1.157:8000/static/chat_record/'+image.name)&amp;#125;, ensure_ascii=False)</span>                <span class="token keyword">for</span> client <span class="token keyword">in</span> clients<span class="token punctuation">:</span>                    clients<span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s <span class="token operator">=</span> str<span class="token punctuation">(</span>timestamp1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span><span class="token string">'http://192.168.1.157:8000/static/chat_record/'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>image<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'chat_record/%s.txt'</span> <span class="token operator">%</span> uid<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'message': 'ok'&amp;#125;)</span></code></pre></li><li><p>发送与渲染</p><blockquote><p>判断：indexOf() —&gt;判断是否有某个元素，格式为 <strong>字符串&amp;&amp;字符串.indexOf(‘子串’)</strong></p><p>如果不存在，则返回一个**-1**</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a<span class="token operator">-</span>modal v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">'show'</span> @ok<span class="token operator">=</span><span class="token string">"myok"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"i in msglist"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"i.username"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">'i.msg &amp;&amp; i.msg.indexOf(".jpg")!=-1'</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>i<span class="token punctuation">.</span>username<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>a<span class="token operator">-</span>avatar <span class="token punctuation">:</span>size<span class="token operator">=</span><span class="token string">"44"</span> <span class="token punctuation">:</span>src<span class="token operator">=</span>i<span class="token punctuation">.</span>msg style<span class="token operator">=</span><span class="token string">'margin-left: 20px'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>avatar<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>          <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>i<span class="token punctuation">.</span>username<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>i<span class="token punctuation">.</span>msg<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>          <span class="token operator">&lt;</span>span<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"发送消息"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span> <span class="token operator">></span>              <span class="token operator">&lt;</span>a<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"msg"</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"buttonlayout"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">'primary'</span> @click<span class="token operator">=</span><span class="token string">"send_msg"</span><span class="token operator">></span>发送消息<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>              <span class="token operator">&lt;</span>a<span class="token operator">-</span>upload              name<span class="token operator">=</span><span class="token string">"file"</span>              <span class="token punctuation">:</span>multiple<span class="token operator">=</span><span class="token string">"true"</span>              <span class="token punctuation">:</span>action<span class="token operator">=</span>uid              <span class="token punctuation">:</span>headers<span class="token operator">=</span><span class="token string">"headers"</span>              @change<span class="token operator">=</span><span class="token string">"handleChange"</span>              <span class="token operator">></span>                <span class="token operator">&lt;</span>a<span class="token operator">-</span>button<span class="token operator">></span> <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon type<span class="token operator">=</span><span class="token string">"upload"</span> <span class="token operator">/</span><span class="token operator">></span> 发送文件 <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>upload<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>modal<span class="token operator">></span></code></pre><p>一个简单的聊天室就做好啦</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>验证码系列(邮箱、短信)</title>
      <link href="2020/11/10/yan-zheng-ma-xi-lie/"/>
      <url>2020/11/10/yan-zheng-ma-xi-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="python3利用腾讯云发送短信"><a href="#python3利用腾讯云发送短信" class="headerlink" title="python3利用腾讯云发送短信"></a><code>python3</code>利用腾讯云发送短信</h2><h4 id="如何发送短信"><a href="#如何发送短信" class="headerlink" title="如何发送短信"></a>如何发送短信</h4><blockquote><p>首先，注册一个腾讯云的账号，然后点击<a href="https://cloud.tencent.com/product/sms">这里</a></p></blockquote><ol><li><p>注册成功后，腾讯云会自动生成一个短信应用，如果没有默认应用，需要新建一下</p></li><li><p>记录一下应用的 appid 以及 appkey 一会要用到</p><img src="/2020/11/10/yan-zheng-ma-xi-lie/012.png" class></li><li><p>配置短信的签名，用来限制短信接口的权限，防止被恶意调用</p></li><li><p>然后配置模板</p></li><li><p>好了，进入正题，下面安装腾讯云短信的sdk<br><code>pip install qcloudsms_py</code></p></li><li><p>按照官网文档，准备必要的参数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 短信应用 SDK AppID</span>appid <span class="token operator">=</span> <span class="token number">1400009099</span>  <span class="token comment" spellcheck="true"># SDK AppID 以1400开头</span><span class="token comment" spellcheck="true"># 短信应用 SDK AppKey</span>appkey <span class="token operator">=</span> <span class="token string">"9ff91d87c2cd7cd0ea762f141975d1df37481d48700d70ac37470aefc60f9bad"</span><span class="token comment" spellcheck="true"># 需要发送短信的手机号码</span>phone_numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"21212313123"</span><span class="token punctuation">,</span> <span class="token string">"12345678902"</span><span class="token punctuation">,</span> <span class="token string">"12345678903"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 短信模板ID，需要在短信控制台中申请</span>template_id <span class="token operator">=</span> <span class="token number">7839</span>  <span class="token comment" spellcheck="true"># NOTE: 这里的模板 ID`7839` 只是示例，真实的模板 ID 需要在短信控制台中申请</span><span class="token comment" spellcheck="true"># 签名</span>sms_sign <span class="token operator">=</span> <span class="token string">"腾讯云"</span>  <span class="token comment" spellcheck="true"># NOTE: 签名参数使用的是`签名内容`，而不是`签名ID`。这里的签名"腾讯云"只是示例，真实的签名需要在短信控制台中申请</span></code></pre></li><li><p>指定模板ID单发短信</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> qcloudsms_py <span class="token keyword">import</span> SmsSingleSender<span class="token keyword">from</span> qcloudsms_py<span class="token punctuation">.</span>httpclient <span class="token keyword">import</span> HTTPErrorssender <span class="token operator">=</span> SmsSingleSender<span class="token punctuation">(</span>appid<span class="token punctuation">,</span> appkey<span class="token punctuation">)</span>params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"5678"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 当模板没有参数时，`params = []`可以发送随机数，用来做短信验证码,如果指定为["5678",'5']，则过期时间为5分钟</span><span class="token keyword">try</span><span class="token punctuation">:</span>     result <span class="token operator">=</span> ssender<span class="token punctuation">.</span>send_with_param<span class="token punctuation">(</span><span class="token number">86</span><span class="token punctuation">,</span> phone_numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      template_id<span class="token punctuation">,</span> params<span class="token punctuation">,</span> sign<span class="token operator">=</span>sms_sign<span class="token punctuation">,</span> extend<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> ext<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token keyword">except</span> HTTPError <span class="token keyword">as</span> e<span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre></li><li><p>如果要群发短信，<code>phone_numbers</code>不取0值，发送全部</p></li></ol><hr><h4 id="点击发送短信验证码"><a href="#点击发送短信验证码" class="headerlink" title="点击发送短信验证码"></a>点击发送短信验证码</h4><p>视图定义，获取手机号，这里，我是把上面的脚本封装成函数<code>phone_s</code>了，两个参数，分别为手机号和随机数验证码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">phoneView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        phone <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'phone'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 随机数，用来做验证码</span>        uuid <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 调用发送短信的接口，传入手机号和随机数验证码</span>        pwg <span class="token operator">=</span> phone_s<span class="token punctuation">(</span>phone<span class="token punctuation">,</span>uuid<span class="token punctuation">)</span>        <span class="token keyword">if</span> pwg<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 连接redis</span>            redis_client <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'phone'</span><span class="token punctuation">)</span>            redis_phone <span class="token operator">=</span> redis_client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>phone<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 防止频繁发送，如果redis中有，就不必再发</span>            <span class="token keyword">if</span> redis_phone<span class="token punctuation">:</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code': 1003, 'msg': '频繁发送'&amp;#125;)</span>            <span class="token comment" spellcheck="true"># 存入redis,邮箱为键，uuid为值</span>            redis_client <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'phone'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取redis客户端</span>            redis_client<span class="token punctuation">.</span>setex<span class="token punctuation">(</span>phone<span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code':1000,'msg':'发送成功'&amp;#125;)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code':1004,'msg':'发送失败'&amp;#125;)</span></code></pre><p>至于验证，只需要从redis中取出验证码来比对即可</p><hr><h2 id="邮箱验证码"><a href="#邮箱验证码" class="headerlink" title="邮箱验证码"></a>邮箱验证码</h2><p>发送邮箱验证码，我们使用的是QQ邮箱，打开QQ邮箱，打开设置，在里面找到</p><p><strong><code>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</code></strong></p><p>打开POP3/SMTP服务</p><p>获取到授权码之后，我们就可以直接可以开始</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#定义参数</span>my_mail <span class="token operator">=</span> <span class="token string">"你申请授权的邮箱"</span><span class="token comment" spellcheck="true">#授权码</span>my_pass <span class="token operator">=</span> <span class="token string">"授权码"</span><span class="token comment" spellcheck="true">#定义发送邮件的方法</span><span class="token keyword">def</span> <span class="token function">mail</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span>content<span class="token punctuation">,</span>mailaddr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#声明邮件对象</span>    msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>content<span class="token punctuation">,</span><span class="token string">'plain'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置发送方对象</span>    msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> formataddr<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'在线教育平台'</span><span class="token punctuation">,</span>my_mail<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置收件方对象</span>    msg<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> formataddr<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'尊敬的客户'</span><span class="token punctuation">,</span>mailaddr<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置标题</span>    msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subject    <span class="token comment" spellcheck="true">#设置smtp服务器</span>    server <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span><span class="token string">"smtp.qq.com"</span><span class="token punctuation">,</span><span class="token number">465</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#登录邮箱</span>    server<span class="token punctuation">.</span>login<span class="token punctuation">(</span>my_mail<span class="token punctuation">,</span>my_pass<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#发送邮件</span>    server<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>my_mail<span class="token punctuation">,</span><span class="token punctuation">[</span>mailaddr<span class="token punctuation">]</span><span class="token punctuation">,</span>msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭smtp链接</span>    server<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>然后定义视图</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Go_emailView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 验证邮箱有效性</span>        email <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'email'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">'[a-zA-Z0-9]&amp;#123;0,19&amp;#125;@(qq|163|126)\.(com|cn|net)$'</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code': 1002, 'msg': '电子邮箱不正确'&amp;#125;)</span>        <span class="token comment" spellcheck="true"># 查询redis中是否有这个数据，如果有，则不需要再次发送</span>        <span class="token comment" spellcheck="true"># 验证邮箱验证码</span>        redis_client <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'email'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取redis中的库</span>        redis_email <span class="token operator">=</span> redis_client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>email<span class="token punctuation">)</span>        <span class="token keyword">if</span> redis_email<span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code':1003,'msg':'频繁发送'&amp;#125;)</span>        uuid <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 调用发送邮件的函数</span>            mail<span class="token punctuation">(</span><span class="token string">'龙潭技术博客验证'</span><span class="token punctuation">,</span> <span class="token string">'您的验证码是&amp;#123;&amp;#125;，有限期为2分钟'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 存入redis,邮箱为键，uuid为值</span>            redis_client <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'email'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取redis客户端</span>            redis_client<span class="token punctuation">.</span>setex<span class="token punctuation">(</span>email<span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code':1000,'msg':'发送成功'&amp;#125;)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code':1001,'msg':'发送失败'&amp;#125;)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket</title>
      <link href="2020/11/09/websocket/"/>
      <url>2020/11/09/websocket/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是websocket"><a href="#1-什么是websocket" class="headerlink" title="1.什么是websocket"></a>1.什么是<code>websocket</code></h2><blockquote><p><code>websocket</code>是<code>HTML5</code>出的协议，和HTTP协议没有什么关系，它的目的在于，在浏览器和服务器之间建立一个不受限制的双向实时通信的通道，比如服务器可以任意时刻向浏览器主动的推送消息</p><p> 它基于TCP，先通过HTTP/<code>HTTPS</code>协议发起一条特殊的HTTP请求进行握手后创建一个用于交换数据的TCP连接</p><p>他们是并行的关系</p></blockquote><p>HTTP和<code>WebScoket</code>的区别</p><ul><li>HTTP不支持常久的连接(长连接\循环连接等不算)</li><li><code>WebScket</code>和服务器只要一次握手动作，HTTP协议每次链接都需要三次握手才能发送消息</li><li>服务器和浏览器都可以在任意时刻相互的推送消息，HTTP的缺点就在于此，浏览器不主动请求，服务器就没法给浏览器发送数据</li><li>HTTP协议每次请求都要发送请求头，<code>websocket</code>一旦建立连接，之后请求都不用发送请求头</li></ul><blockquote><p>虽然HTTP可以用轮询或者comet机制实现<code>WebSocket</code>的功能，但是，每次轮询，就算是再快，也需要间隔时间，这样就造成了它的实时性不够，而且， 频繁的发送请求，会给服务器造成很大的压力，一般情况下，没人会这么做</p></blockquote><ul><li>轮询：<code>js</code>启动定时发送请求，间隔性的请求服务器是否有新的数据</li><li>comet：请求没有超过预定时间或者没有返回数据，一直保持连接状态，等有了数据再进行推送</li></ul><blockquote><p>comet虽然是实时性够了，但是，长时间挂起线程，会浪费服务器的资源，如果长时间没有数据，链路上的任何一个网关都可能关闭这个链接。</p><p>所以，会造成两个后果，要么，你不知道什么时候断开了，要么，你就定期发ping，检查连接是否正常</p></blockquote><h2 id="2-什么是三次握手，四次挥手"><a href="#2-什么是三次握手，四次挥手" class="headerlink" title="2.什么是三次握手，四次挥手"></a>2.什么是三次握手，四次挥手</h2><p>这是基于TCP协议的规则，建立TCP需要三次握手才能建立，而断开连接则需要四次挥手</p><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><p>第一次握手，客户端发送一个待SYN表之的TCP报文到服务器</p><p>第二次握手，服务器回应客户端，发送一个带有SYN和<code>ACK</code>标志的报文，表示它对客户端SYN报文的回应，同时询问客户端是否准备好进行数据通讯</p><p>第三次握手，客户端必须再次回应服务器一个<code>ACK</code>报文</p><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>第一次挥手，客户端发送一个FIN，用来关闭客户到服务器的数据传送</p><p>第二次挥手，服务器收到这个FIN，它发回一个<code>ACK</code>，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。</p><p>第三次挥手，服务器关闭客户端的连接，发送一个FIN给客户端</p><p>第四次挥手，客户段发回<code>ACK</code>报文确认，并将确认序号设置为收到序号加1</p><blockquote><p>由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。这原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</p></blockquote><h2 id="3-WebSocket的使用"><a href="#3-WebSocket的使用" class="headerlink" title="3.WebSocket的使用"></a>3.<code>WebSocket</code>的使用</h2><p>1.首先需要一个<code>dwebsocket</code>依赖，安装非常简单，直接<code>pip install dwebsocket</code></p><p>2.在<code>settings</code>中需要注册加载，<code>INSTALLED_APPS</code>注册<code>dwebsocket</code></p><blockquote><p><code>dwebsocket</code>在<code>django3.1</code>之后自动加载，在这之前，都需要进行注册这一步骤</p></blockquote><p>3.导包<code>from dwebsocket.decorators import accept_websocket</code></p><p>4.写一个视图函数，需要用**<code>@accept_websocket</code>**，这样，声明了他是一个<code>webscoket</code>连接，这只是链接，不是发送消息，这里，定义了一个公共字典clients，一会儿要用，记住它</p><pre class=" language-python"><code class="language-python">clients <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>@accept_websocket<span class="token keyword">def</span> <span class="token function">websocketlink</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        userid <span class="token operator">=</span> uuid<span class="token punctuation">.</span>uuid1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            message <span class="token operator">=</span> request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> message<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                clients<span class="token punctuation">[</span>userid<span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>websocket</code></pre><blockquote><p><code>dwebsocket</code>有两种装饰器：<code>require_websocket</code>和<code>accept_websocekt</code><br>使用<code>require_websocket</code>装饰器会导致视图函数无法接收导致正常的<code>http</code>请求，一般情况使用<code>accept_websocket</code>方式就可以了</p></blockquote><p>5.在前端，发送一个连接，<strong>注意</strong>，此时后端的链接不是<code>http</code>，而是<code>ws</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// websocket连接</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'WebSocket'</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  生成websocket链接</span>    <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://127.0.0.1:8000/websocketlink/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送链接</span>        ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你好啊世界'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送消息</span>    ws<span class="token punctuation">.</span>onmessage<span class="token operator">=</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将获取信息打印</span>        <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$notification<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                message<span class="token punctuation">:</span>received_msg            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        ws<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'链接已关闭'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>6.推送消息接口，一个函数视图举例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sendmessage</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取消息</span>    msg <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 循环公共字典clients，遍历内部所有的链接，</span>    <span class="token keyword">for</span> client <span class="token keyword">in</span> clients<span class="token punctuation">:</span>        clients<span class="token punctuation">[</span><span class="token string">'client'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'message':"ok"&amp;#125;)</span></code></pre><p>然后，链接成功后，再新打开一个页面，访问这个<code>sendmessage</code>方法，就可以在你的前端页面看到你发送的数据啦</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebHook机制</title>
      <link href="2020/11/07/webhook-ji-zhi/"/>
      <url>2020/11/07/webhook-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是web-hook"><a href="#1-什么是web-hook" class="headerlink" title="1.什么是web hook"></a>1.什么是<code>web hook</code></h3><blockquote><p><code>webhook</code>是一个<code>API</code>概念，并且变得越来越流行，我们能用事件描述的事物越来越多，<code>webhook</code>的作用范围也就越大， <code>webhook</code>作为一个清凉的事件处理应用，正变得越来越有用</p></blockquote><p>我们在网上做的工作，大部分其实就是事件，<code>webhooks</code>已经成为了连接系统的主要方式，不管是用户创建，支付成功，<code>DockerHub</code>镜像推送或者<code>Git</code>仓库上的合并请求，这些都是非常有用并且轻量级的共享信息的方式</p><ul><li><p>简单来说，就是一种反向<code>API</code>，类似于触发器一样</p><ul><li><p>打个比方，比如项目A要从项目B获取数据，通常需要项目B提供一个<code>API</code>接口，然后项目A去请求项目B的接口，获取数据</p></li><li><blockquote><p>通过<code>webhook</code>机制，对客户端和服务端的模式进行逆转</p></blockquote></li><li><p>继续新增加一个需求，项目A需要从项目B获取<strong>实时</strong>数据，如果按照传统做法，不停的去请求接口，就算是实现了这个功能，但是，效率和性能都非常的低</p></li><li><p>通过<code>webhook</code>机制，我们在项目B中加上一个触发器，在项目B每次创建新数据或者修改了某个数据，就会自动触发， 便会向项目B的hook地址进行请求，项目A收到项目B的请求，然后对数据进行处理</p></li></ul></li></ul><hr><h3 id="2-mysql外键的选择"><a href="#2-mysql外键的选择" class="headerlink" title="2.mysql外键的选择"></a>2.<code>mysql</code>外键的选择</h3><blockquote><p>所有的web开发都离不开性能和效率，我们就来聊聊<code>mysql</code>物理外键的性能问题</p></blockquote><p>为何说外键有性能问题，让我们慢慢分析一下</p><ol><li>数据库需要维护外键的内部管理，这样就给数据库增加了一些性能负担，尽管是些小负担，但是在数据量庞大的时候，和优化过的数据库差距也是很大的</li><li>外键等于把数据的一致性事务实现，全部交给数据库服务器完成，同样也会增加数据库服务器的压力</li><li>有了外键，当做一些设计外键字段的增删改等操作之后，需要触发相关操作去检查，从而不得不消耗资源</li><li>外键还会因为需要的请求对其他表内部加锁而容易出现死锁的情况</li></ol><p>虽然很多人不推荐你使用物理外键，但你听到更多的是mysql，而不是SQL server或者其他，比较公认的是，他的外键设计得确实不怎么好，限制多功能不强大等等</p><blockquote><p>还有，最重要的一点是，万一主键所在的表需要拆分，重构，那么，物理外键对应的表，也要进行一系列繁琐的操作，另一方面，数据库帮你保证级联关系，自己不保证思路清晰啊</p></blockquote><p>所以，逻辑外键在业界是比较成熟的，不适用物理外键，我们也可以约定逻辑外键，不再数据库中声明，外键，只在程序中实现关联</p><p>那么，逻辑外键实现了物理外键的功能，这，才是开发人员的第一选择</p><hr><p>说到这里，在数据库的策略上，我们也可以选择逻辑删除</p><blockquote><p>逻辑删除，就是，只对表进行更新增加操作，不进行删除，不再使用的历史数据，定期的归档来减少压力</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> WebHook </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据结构与算法</title>
      <link href="2020/11/05/python-shu-ju-jie-gou-yu-suan-fa/"/>
      <url>2020/11/05/python-shu-ju-jie-gou-yu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><blockquote><p>又称存储结构</p></blockquote><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p> 集合结构：(同属一个整体，但是每个元素之间没有关系)<br>​ 线性结构：队尾元素没有直接后继，队头元素没有直接前驱,其他元素有唯一的直接前驱和后继（一对一）<br>​ 树形结构：除了根元素，其他元素都有一个前驱和多个后继（一对多）<br>​ 图形结构：每个元素都有多个前驱和后继（多对多）</p><p> 重点:<code>线性结构</code></p><ul><li>如果既是线性结构，又是链式结构，这种结构成为链表</li><li>如果既是线性结构，又是顺序结构，这种结构成为顺序表</li></ul><p>链表又分为：单向链表 双向链表 单向循环链表</p><p>单向链表:当连接表中的每个节点只包含一个指针时，他只能指向下一个节点地址，这种只含有一个指针域的链表，称为<strong>单向链表</strong></p><p>双向链表：它的连接表中，每个节点，都有两个指针，指向了直接前驱和直接后继，从双向链表中的任意一个节点开始访问，都能很方便的访问到它的前驱节点和后继节点，这种结构，称为<strong>双向链表</strong></p><p>单向循环链表：普通的单向链表，末尾节点(也叫叶子节点)的指针，不再指向NULL，而是指向第一个节点，即开始节点</p><blockquote><p>为什么要用单向循环链表，打个比方，我们要对单向链表中的某个节点进行访问，只能从头开始访问，而单向循环链表，可以从任意一个节点开始，因为它末尾的的指针指向了第一个节点，极大的增加了其灵活性</p></blockquote><p>接下来，我们用代码来展示一下</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''单向链表：指向空的节点为尾结点单向循环链表：指向头结点的节点为尾结点'''</span><span class="token comment" spellcheck="true"># 创建节点类</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""节点类"""</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>pointer <span class="token operator">=</span> None<span class="token comment" spellcheck="true"># 创建链表类       </span><span class="token keyword">class</span> <span class="token class-name">SCLL</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" 初始化函数"""</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> Node<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>pointer <span class="token operator">=</span> self<span class="token punctuation">.</span>head    <span class="token comment" spellcheck="true"># 判断是否位空</span>    <span class="token triple-quoted-string string">'''需要判断头结点是否指向自身，从而确定是否为空'''</span>    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>pointer <span class="token operator">==</span> self<span class="token punctuation">.</span>head<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token comment" spellcheck="true"># 针对空链表可返回None；针对非空链表即采用循环操作，结束条件当前位置是尾结点</span>    <span class="token keyword">def</span> <span class="token function">traversal</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 遍历链表"""</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        counter <span class="token operator">=</span> <span class="token number">1</span>        current <span class="token operator">=</span>self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>pointer        <span class="token comment" spellcheck="true"># 当前指针不指向头结点时进行循环</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>current <span class="token operator">!=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" Element &amp;#123;&amp;#125; is &amp;#123;&amp;#125; "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>counter<span class="token punctuation">,</span> current<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            counter <span class="token operator">+=</span> <span class="token number">1</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>pointer        <span class="token keyword">return</span> <span class="token boolean">True</span> </code></pre><p>链表和顺序表的区别：<br>链表插入删除方便，修改查找不方便<br>顺序表修改和查找方便，插入删除不方便</p><blockquote><p>顺序结构：逻辑结构相邻，物理结构也相邻<br>​链式结构：逻辑相邻，物理不一定相邻</p></blockquote><hr><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><blockquote><p>官方说法为：解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制</p><p>通俗的讲：</p><p>算法是特定解决问题的方法步骤</p></blockquote><h3 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h3><ul><li>输入：有零个或多个输入</li><li>输出：有一个或多个输出</li><li>有穷性：有限的时间或有限的步骤可以结束算法</li><li>确定性：每个步骤只有唯一的意思，不会产生歧义</li><li>可行性：可用现有的条件可以实现</li></ul><h3 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h3><ul><li>时间复杂度:算法运行所需要的时间</li></ul><p>用大O表示法<br><code>list：pop()</code>删除末尾元素：O(1)<br>pop(0)删除第一个元素：O(n)<br>sort()排序：O(<code>nlogn</code>)<br>insert()插入元素 O(n)<br>append()末尾添加元素:O(1)<br>字典：<br>除了循环 复制 O(n)<br>删除、添加、修改、查询元素O(1)</p><ul><li>空间复杂度：算法运行所需要的空间</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Celery</title>
      <link href="2020/11/03/celery/"/>
      <url>2020/11/03/celery/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h2><h3 id="1-1-celery应用举例"><a href="#1-1-celery应用举例" class="headerlink" title="1.1 celery应用举例"></a>1.1 celery应用举例</h3><ul><li><p>Celery 是一个 基于python开发的分布式异步消息任务队列，通过它可以轻松的实现任务的异步处理，如果你的业务场景中需要用到异步任务，就可以考虑使用celery</p></li><li><p>你想对100台机器执行一条批量命令，可能会花很长时间 ，但你不想让你的程序等着结果返回，而是给你返回 一个任务ID,你过一段时间只需要拿着这个任务id就可以拿到任务执行结果， 在任务执行ing进行时，你可以继续做其它的事情</p></li><li><p>Celery 在执行任务时需要通过一个消息中间件来接收和发送任务消息，以及存储任务结果， 一般使用rabbitMQ or Redis</p></li></ul><h3 id="1-2-Celery有以下优点"><a href="#1-2-Celery有以下优点" class="headerlink" title="1.2 Celery有以下优点"></a>1.2 Celery有以下优点</h3><ul><li>简单：一单熟悉了celery的工作流程后，配置和使用还是比较简单的</li><li>高可用：当任务执行失败或执行过程中发生连接中断，celery 会自动尝试重新执行任务</li><li>快速：一个单进程的celery每分钟可处理上百万个任务</li><li>灵活： 几乎celery的各个组件都可以被扩展及自定制</li></ul><h3 id="1-3-Celery-特性"><a href="#1-3-Celery-特性" class="headerlink" title="1.3 Celery 特性"></a>1.3 Celery 特性</h3><ul><li>方便查看定时任务的执行情况, 如 是否成功, 当前状态, 执行任务花费的时间等.</li><li>可选 多进程, Eventlet 和 Gevent 三种模型并发执行.</li><li>Celery 是语言无关的.它提供了python 等常见语言的接口支持.</li></ul><h2 id="Celery组件"><a href="#Celery组件" class="headerlink" title="Celery组件"></a>Celery组件</h2><h3 id="2-1-Celery-扮演生产者和消费者的角色"><a href="#2-1-Celery-扮演生产者和消费者的角色" class="headerlink" title="2.1 Celery 扮演生产者和消费者的角色"></a>2.1 Celery 扮演生产者和消费者的角色</h3><ul><li><p><strong>Celery Beat :</strong> 任务调度器. Beat 进程会读取配置文件的内容, 周期性的将配置中到期需要执行的任务发送给任务队列.</p></li><li><p><strong>Celery Worker :</strong> 执行任务的消费者, 通常会在多台服务器运行多个消费者, 提高运行效率.</p></li><li><p><strong>Broker :</strong> 消息代理, 队列本身. 也称为消息中间件. 接受任务生产者发送过来的任务消息, 存进队列再按序分发给任务消费方(通常是消息队列或者数据库).</p></li><li><p><strong>Producer :</strong> 任务生产者. 调用 Celery API , 函数或者装饰器, 而产生任务并交给任务队列处理的都是任务生产者.</p></li><li><p><strong>Result Backend :</strong> 任务处理完成之后保存状态信息和结果, 以供查询.</p></li></ul><h3 id="2-2-celery架构图"><a href="#2-2-celery架构图" class="headerlink" title="2.2 celery架构图"></a>2.2 celery架构图</h3><p><img src="/2020/11/03/celery/602127040446.png"> </p><h3 id="2-3-产生任务的方式"><a href="#2-3-产生任务的方式" class="headerlink" title="2.3 产生任务的方式"></a>2.3 产生任务的方式</h3><ul><li><p>发布者发布任务(WEB 应用)</p></li><li><p>任务调度按期发布任务(定时任务)</p></li></ul><h3 id="2-4-celery-依赖三个库-这三个库-都由-Celery-的开发者开发和维护"><a href="#2-4-celery-依赖三个库-这三个库-都由-Celery-的开发者开发和维护" class="headerlink" title="2.4 celery 依赖三个库: 这三个库, 都由 Celery 的开发者开发和维护."></a>2.4 celery 依赖三个库: 这三个库, 都由 Celery 的开发者开发和维护.</h3><ul><li><code>billiard :</code> 基于 Python2.7 的 multisuprocessing 而改进的库, 主要用来提高性能和稳定性.</li><li><code>librabbitmp : </code>C 语言实现的 Python 客户端</li><li><code>kombu :</code> Celery 自带的用来收发消息的库, 提供了符合 Python 语言习惯的, 使用 AMQP 协议的高级借口.</li></ul><h2 id="配置Celery"><a href="#配置Celery" class="headerlink" title="配置Celery"></a>配置Celery</h2><h3 id="安装celery"><a href="#安装celery" class="headerlink" title="安装celery"></a>安装celery</h3><pre class=" language-python"><code class="language-python">pip install celery @ https<span class="token punctuation">:</span><span class="token operator">//</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>celery<span class="token operator">/</span>celery<span class="token operator">/</span>tarball<span class="token operator">/</span>master</code></pre><h3 id="新建celery-main-py配置celery"><a href="#新建celery-main-py配置celery" class="headerlink" title="新建celery/main.py配置celery"></a>新建<code>celery/main.py</code>配置celery</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># celery_task/main.py</span><span class="token keyword">import</span> os<span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery<span class="token comment" spellcheck="true"># 定义celery实例, 需要的参数, 1, 实例名, 2, 任务发布位置, 3, 结果保存位置</span>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'mycelery'</span><span class="token punctuation">,</span>             broker<span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/14'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 任务存放的地方 </span>             backend<span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/15'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果存放的地方</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="启动celery"><a href="#启动celery" class="headerlink" title="启动celery"></a>启动celery</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''1.启动celery'''</span><span class="token comment" spellcheck="true">#1.1 单进程启动celery</span>celery <span class="token operator">-</span>A main worker <span class="token operator">-</span>l INFO<span class="token comment" spellcheck="true">#1.2 celery管理</span>celery multi start celery_test <span class="token operator">-</span>A celery_test <span class="token operator">-</span>l debug <span class="token operator">-</span><span class="token operator">-</span>autoscale<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">5</span>        <span class="token comment" spellcheck="true"># celery并发数：最多50个，最少5个</span>ps auxww<span class="token operator">|</span>grep <span class="token string">"celery worker"</span><span class="token operator">|</span>grep <span class="token operator">-</span>v grep<span class="token operator">|</span>awk <span class="token string">'&amp;#123;print $2&amp;#125;'</span><span class="token operator">|</span>xargs kill <span class="token operator">-</span><span class="token number">9</span>       # 关闭所有celery进程</code></pre><h2 id="1-使用celery异步发送短信"><a href="#1-使用celery异步发送短信" class="headerlink" title="1.使用celery异步发送短信"></a>1.使用celery异步发送短信</h2><h3 id="1-1-在celery-task-mian-py中添加发送短信函数"><a href="#1-1-在celery-task-mian-py中添加发送短信函数" class="headerlink" title="1.1 在celery_task/mian.py中添加发送短信函数"></a>1.1 在<code>celery_task/mian.py</code>中添加发送短信函数</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># celery项目中的所有导包地址, 都是以CELERY_BASE_DIR为基准设定.</span><span class="token comment" spellcheck="true"># 执行celery命令时, 也需要进入CELERY_BASE_DIR目录执行.</span>CELERY_BASE_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>task<span class="token punctuation">(</span>bind<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_sms_code</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mobile<span class="token punctuation">,</span> datas<span class="token punctuation">)</span><span class="token punctuation">:</span>    sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>CELERY_BASE_DIR<span class="token punctuation">,</span> <span class="token string">'../syl'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在方法中导包</span>    <span class="token keyword">from</span> libs<span class="token punctuation">.</span>rl_sms <span class="token keyword">import</span> send_message    <span class="token comment" spellcheck="true"># time.sleep(5)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 用 res 接收发送结果, 成功是:０，　失败是：－１</span>        res <span class="token operator">=</span> send_message<span class="token punctuation">(</span>mobile<span class="token punctuation">,</span> datas<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token string">'-1'</span>    <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token string">'-1'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果发送结果是 -1  就重试.</span>        self<span class="token punctuation">.</span>retry<span class="token punctuation">(</span>countdown<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> exc<span class="token operator">=</span>Exception<span class="token punctuation">(</span><span class="token string">'短信发送失败'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="1-2-在verifications-views-py中添加celery发送短信视图函数"><a href="#1-2-在verifications-views-py中添加celery发送短信视图函数" class="headerlink" title="1.2 在verifications/views.py中添加celery发送短信视图函数"></a>1.2 在<code>verifications/views.py</code>中添加celery发送短信视图函数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SmsCodeView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""使用apiview的限流"""</span>    <span class="token comment" spellcheck="true"># 1. 所有人可以访问</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 1. 获取参数</span>        phone <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'phone'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 手机号</span>        image_code <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'image_code'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 图片验证码</span>        image_code_uuid <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'image_code_uuid'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 前端生成的uuid</span>        <span class="token comment" spellcheck="true"># 2. 检查参数</span>        <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>phone<span class="token punctuation">,</span> image_code<span class="token punctuation">,</span> image_code_uuid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"code": 999, "msg": "参数不全"&amp;#125;)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">'^1[3456789]\d&amp;#123;9&amp;#125;$'</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"code": 999, "msg": "手机号码不正确"&amp;#125;)</span>        <span class="token comment" spellcheck="true"># 3. 检查是否发送</span>        redis_client <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'img_code'</span><span class="token punctuation">)</span>        phone_exists <span class="token operator">=</span> redis_client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>phone<span class="token punctuation">)</span>        <span class="token keyword">if</span> phone_exists<span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"code": 999, "msg": "频繁发送, 请稍后再试"&amp;#125;)</span>        <span class="token comment" spellcheck="true"># 验证图形验证码</span>        redis_image_code <span class="token operator">=</span> redis_client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>image_code_uuid<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># bytes</span>        <span class="token keyword">if</span> redis_image_code<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># bytes 转成 string</span>            redis_image_code <span class="token operator">=</span> redis_image_code<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 比较用户提供的图片内容是否和redis中保存的一致</span>        <span class="token keyword">if</span> image_code<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> redis_image_code<span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code': 999, 'msg': '图片验证码不正确'&amp;#125;)</span>        <span class="token comment" spellcheck="true"># 4. 发送</span>        code <span class="token operator">=</span> <span class="token string">'%06d'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机6位验证码</span>        <span class="token keyword">from</span> syl<span class="token punctuation">.</span>settings <span class="token keyword">import</span> BASE_DIR        sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'../celery_task'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">from</span> main <span class="token keyword">import</span> send_sms_code  <span class="token comment" spellcheck="true"># 必须这么写, 从main中导包</span>        send_sms_code<span class="token punctuation">.</span>delay<span class="token punctuation">(</span>phone<span class="token punctuation">,</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5.使用 pipeline 批量操作</span>        pl <span class="token operator">=</span> redis_client<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 实例化pipeline对象</span>        pl<span class="token punctuation">.</span>setex<span class="token punctuation">(</span>phone<span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 存储phone:code, 5分钟有效期</span>        pl<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>image_code_uuid<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 从redis中删除这个图片验证码, 以防再次被使用</span>        pl<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 6. 返回结果</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"code": 0, "msg": "短信发送成功"&amp;#125;)</span></code></pre><h3 id="1-3-添加路由"><a href="#1-3-添加路由" class="headerlink" title="1.3 添加路由"></a>1.3 添加路由</h3><pre class=" language-python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'sms_codes/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>SmsCodeView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h2 id="2-测试接口"><a href="#2-测试接口" class="headerlink" title="2.测试接口"></a>2.测试接口</h2><ul><li>接口URL</li></ul><pre><code>http://192.168.56.100:8888/user/sms_codes/</code></pre><ul><li>请求携带参数</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token number">18538752511</span><span class="token punctuation">,</span>    <span class="token string">"image_code"</span><span class="token punctuation">:</span><span class="token string">"aed3"</span><span class="token punctuation">,</span>                                         <span class="token comment" spellcheck="true"># 前端生成的 图形验证码</span>    <span class="token string">"image_code_uuid"</span><span class="token punctuation">:</span><span class="token string">"de8edce2-fc9f-11ea-9325-005056c00008"</span>     <span class="token comment" spellcheck="true"># 前端生成的uuid</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h2 id="django添加检查用户名和手机号数量接口"><a href="#django添加检查用户名和手机号数量接口" class="headerlink" title="django添加检查用户名和手机号数量接口"></a>django添加检查用户名和手机号数量接口</h2><h3 id="1-1-在user-urls-py中添加"><a href="#1-1-在user-urls-py中添加" class="headerlink" title="1.1 在user/urls.py中添加"></a>1.1 在<code>user/urls.py</code>中添加</h3><pre class=" language-python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'count/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>RegCountView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 查询用户名手机号使用量的视图,  /user/count/</span><span class="token punctuation">]</span></code></pre><h3 id="1-2-在user-views-py中添加视图函数"><a href="#1-2-在user-views-py中添加视图函数" class="headerlink" title="1.2 在user/views.py中添加视图函数"></a>1.2 在<code>user/views.py</code>中添加视图函数</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查询用户数量接口</span><span class="token keyword">class</span> <span class="token class-name">RegCountView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 注册时需要验证的用户名和手机号是否使用</span>    <span class="token comment" spellcheck="true"># 自定义权限类</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 接收参数:  验证的内容type: username/phone,  data: '用户名' 或者 '手机号',</span>        datatype <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">,</span> datatype<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code': 999, 'msg': '参数不完整'&amp;#125;)</span>        <span class="token keyword">if</span> datatype <span class="token operator">==</span> <span class="token string">'username'</span><span class="token punctuation">:</span>            count <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> datatype <span class="token operator">==</span> <span class="token string">'phone'</span><span class="token punctuation">:</span>            count <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>phone<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code': 0, 'msg': '查询成功', 'data': &amp;#123;'type': datatype, 'count': count&amp;#125;&amp;#125;)</span></code></pre><h2 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h2><ul><li>测试接口URL</li></ul><pre class=" language-javascript"><code class="language-javascript">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">56.100</span><span class="token punctuation">:</span><span class="token number">8888</span><span class="token operator">/</span>user<span class="token regex">/count/</span></code></pre><h2 id="完善注册接口"><a href="#完善注册接口" class="headerlink" title="完善注册接口"></a>完善注册接口</h2><h3 id="修改user-views-py中完善视图函数"><a href="#修改user-views-py中完善视图函数" class="headerlink" title="修改user/views.py中完善视图函数"></a>修改<code>user/views.py</code>中完善视图函数</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 注册接口</span><span class="token keyword">class</span> <span class="token class-name">RegisterView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    用户注册, 权限是: 匿名用户可访问    """</span>    <span class="token comment" spellcheck="true"># 自定义权限类</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        接收用户名,密码,手机号和验证码, 前端校验两遍一致性, 注册成功后返回成功, 然后用户自行登录获取token        1. 用户名        2. 密码        3. 手机号        4. 验证码        :param request:        :return:  &amp;#123;'code':0,'msg':'注册成功'&amp;#125;        code: "260361"        password: "123123"        phone: "13303479527"        username: "liangxuepeng"        """</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        phone <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'phone'</span><span class="token punctuation">)</span>        code <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">)</span>        passwrod <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span> passwrod<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> code<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code': 999, 'msg': '参数不全'&amp;#125;)</span>        <span class="token comment" spellcheck="true"># rand_name = self.randomUsername()</span>        <span class="token comment" spellcheck="true"># 验证手机验证码</span>        redis_client <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'verify_code'</span><span class="token punctuation">)</span>        code_redis <span class="token operator">=</span> redis_client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>phone<span class="token punctuation">)</span>        <span class="token keyword">if</span> code_redis<span class="token punctuation">:</span>            code_redis <span class="token operator">=</span> code_redis<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> code <span class="token operator">==</span> code_redis<span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code': 999, 'msg': '手机验证码错误'&amp;#125;)</span>        user <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> phone<span class="token operator">=</span>phone<span class="token punctuation">)</span>        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>passwrod<span class="token punctuation">)</span>        user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code': 0, 'msg': '注册成功'&amp;#125;)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACL与RBAC访问权限模型</title>
      <link href="2020/11/02/acl-yu-rbac/"/>
      <url>2020/11/02/acl-yu-rbac/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是ACL"><a href="#什么是ACL" class="headerlink" title="什么是ACL"></a>什么是<code>ACL</code></h4><blockquote><p>以前非常盛行的一种权限设计，它的核心主要在于用户和权限直接挂钩。</p><p>它的原理非常的简单，每一项资源，都配有一个列表，这个列表记录的就是哪些用户可以对这项资源执行CRUD中的那些操作。当系统试图访问这项资源时，会首先检查这个列表中是否有关于当前用户的访问权限，从而确定当前用户可否执行相应的操作。总得来说，<code>ACL</code>是一种面向资源的访问控制模型，它的机制是围绕<strong>“资源”</strong>展开的。</p></blockquote><p>它的优点是：简单易用，开发便捷</p><p>但同样，它的缺点也很明显，用户和权限直接挂钩，导致在授予权限时的复杂性，比较分散，不便于管理</p><p>使用场景：</p><ul><li> 比较小的用户管理系统</li><li> 常见的文件系统权限设计，直接给用户加权限</li></ul><h4 id="什么是RBAC"><a href="#什么是RBAC" class="headerlink" title="什么是RBAC"></a>什么是<code>RBAC</code></h4><blockquote><p><code>RBAC</code>是基于角色的访问控制系统，权限和角色相联系，用户通过成为某个角色而获取该角色拥有的权限</p><p>它的原理就是将用户按照角色进行归类，通过用户的角色来确定用户有没有对某项资源访问的权限</p></blockquote><p>这样做的好处是，简化了用户与权限的管理，在一定程度上简化了授予时的复杂度，易扩展 易于维护</p><p>缺点：开发对比于<code>ACL</code>相对复杂，而且，比较僵硬，如果要修改某个用户所拥有的权限，只能修改它的角色，这样，如果有不想让他拥有的权限，<code>RBAC</code>就显得很僵硬。</p><p>使用场景：</p><ul><li>数据量比较庞大时授予权限</li><li>比较明确的角色分明时</li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>如果要写一个用户管理系统，数据表之间的关联关系适当的添加关联关系甚至可以不添加那些看起来关联住的表，这样，查询时，完全可以通过多表联查来实现某些目的，不仅会使维护变得简单许多，还会将这个框给划开，而不是牵一发而动全身。</p><img src="/2020/11/02/acl-yu-rbac/20201102201153.png" class><p><strong>左：<code>ACL</code>  右：<code>RBAC</code></strong></p><blockquote><p>无论是<code>ACL</code>还是<code>RBAC</code>，都不能过于复杂，规则过多，否则，维护性和性能会下降</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF操作</title>
      <link href="2020/11/01/drf-cao-zuo/"/>
      <url>2020/11/01/drf-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h3 id="1-DRF初始化"><a href="#1-DRF初始化" class="headerlink" title="1.DRF初始化"></a>1.DRF初始化</h3><p>DRF六中常用操作</p><pre class=" language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>认证<span class="token number">2</span><span class="token punctuation">.</span>权限<span class="token number">3</span><span class="token punctuation">.</span>限流<span class="token number">4</span><span class="token punctuation">.</span>序列化<span class="token number">5</span><span class="token punctuation">.</span>分页<span class="token number">6</span><span class="token punctuation">.</span>版本</code></pre><h4 id="1-1安装DjangoRestFramework"><a href="#1-1安装DjangoRestFramework" class="headerlink" title="1.1安装DjangoRestFramework"></a>1.1安装DjangoRestFramework</h4><pre class=" language-python"><code class="language-python">pip install djangorestframework<span class="token operator">==</span><span class="token number">3.11</span><span class="token punctuation">.</span><span class="token number">1</span>pip install django<span class="token operator">-</span>filter<span class="token operator">==</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">8</span>  <span class="token comment" spellcheck="true">#过滤器</span>pip install markdown <span class="token comment" spellcheck="true"># markdown support for the browsable API</span><span class="token number">123</span></code></pre><h4 id="1-2在syl-settings-py中注册"><a href="#1-2在syl-settings-py中注册" class="headerlink" title="1.2在syl/settings.py中注册"></a>1.2在syl/settings.py中注册</h4><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django_filters'</span><span class="token punctuation">,</span>    <span class="token string">'rest_framework'</span><span class="token punctuation">]</span><span class="token number">1234</span></code></pre><h3 id="1-3-在settings-py中配置"><a href="#1-3-在settings-py中配置" class="headerlink" title="1.3 在settings.py中配置"></a>1.3 在settings.py中配置</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 过滤器</span><span class="token comment" spellcheck="true"># 1,安装 django-filter</span><span class="token comment" spellcheck="true"># 2,注册应用</span><span class="token comment" spellcheck="true"># 3,配置settings, 在view里配置可过滤的字段</span><span class="token comment" spellcheck="true"># 4,使用 查询字符串携带过滤信息</span>REST_FRAMEWORK <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token comment" spellcheck="true"># 文档报错： AttributeError: ‘AutoSchema’ object has no attribute ‘get_link’</span>    <span class="token comment" spellcheck="true"># 用下面的设置可以解决</span>    <span class="token string">'DEFAULT_SCHEMA_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.schemas.AutoSchema'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 默认设置是:</span>    <span class="token comment" spellcheck="true"># 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.openapi.AutoSchema',</span>    <span class="token comment" spellcheck="true"># 异常处理器</span>    <span class="token comment" spellcheck="true"># 'EXCEPTION_HANDLER': 'user.utils.exception_handler',</span>    <span class="token comment" spellcheck="true"># Base API policies</span>    <span class="token string">'DEFAULT_RENDERER_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.renderers.JSONRenderer'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.renderers.BrowsableAPIRenderer'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'DEFAULT_PARSER_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.parsers.JSONParser'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.parsers.FormParser'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.parsers.MultiPartParser'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 1.认证器（全局）</span>    <span class="token string">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.authentication.SessionAuthentication'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 使用session时的认证器</span>        <span class="token string">'rest_framework.authentication.BasicAuthentication'</span>     <span class="token comment" spellcheck="true"># 提交表单时的认证器</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#2.权限配置（全局）： 顺序靠上的严格</span>    <span class="token string">'DEFAULT_PERMISSION_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true"># 'rest_framework.permissions.IsAdminUser',  # 管理员可以访问</span>        <span class="token comment" spellcheck="true"># 'rest_framework.permissions.IsAuthenticated',  # 认证用户可以访问</span>        <span class="token comment" spellcheck="true"># 'rest_framework.permissions.IsAuthenticatedOrReadOnly',  # 认证用户可以访问, 否则只能读取</span>        <span class="token comment" spellcheck="true"># 'rest_framework.permissions.AllowAny',  # 所有用户都可以访问</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#3.限流（防爬虫）</span>    <span class="token string">'DEFAULT_THROTTLE_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.throttling.AnonRateThrottle'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.throttling.UserRateThrottle'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#3.1限流策略</span>    <span class="token string">'DEFAULT_THROTTLE_RATES'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'100/hour'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 认证用户每小时100次</span>        <span class="token string">'anon'</span><span class="token punctuation">:</span> <span class="token string">'3/day'</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true"># 未认证用户每天能访问3次</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    <span class="token string">'DEFAULT_CONTENT_NEGOTIATION_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.negotiation.DefaultContentNegotiation'</span><span class="token punctuation">,</span>    <span class="token string">'DEFAULT_METADATA_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.metadata.SimpleMetadata'</span><span class="token punctuation">,</span>    <span class="token string">'DEFAULT_VERSIONING_CLASS'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#4.分页（全局）：全局分页器, 例如 省市区的数据自定义分页器, 不需要分页</span>    <span class="token string">'DEFAULT_PAGINATION_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.pagination.PageNumberPagination'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 每页返回数量</span>    <span class="token string">'PAGE_SIZE'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 默认 None</span>    <span class="token comment" spellcheck="true">#5.过滤器后端</span>    <span class="token string">'DEFAULT_FILTER_BACKENDS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'django_filters.rest_framework.DjangoFilterBackend'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 'django_filters.rest_framework.backends.DjangoFilterBackend', 包路径有变化</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#5.1过滤排序（全局）：Filtering 过滤排序</span>    <span class="token string">'SEARCH_PARAM'</span><span class="token punctuation">:</span> <span class="token string">'search'</span><span class="token punctuation">,</span>    <span class="token string">'ORDERING_PARAM'</span><span class="token punctuation">:</span> <span class="token string">'ordering'</span><span class="token punctuation">,</span>    <span class="token string">'NUM_PROXIES'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#6.版本控制：Versioning  接口版本控制</span>    <span class="token string">'DEFAULT_VERSION'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span>    <span class="token string">'ALLOWED_VERSIONS'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span>    <span class="token string">'VERSION_PARAM'</span><span class="token punctuation">:</span> <span class="token string">'version'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># Authentication  认证</span>    <span class="token comment" spellcheck="true"># 未认证用户使用的用户类型</span>    <span class="token string">'UNAUTHENTICATED_USER'</span><span class="token punctuation">:</span> <span class="token string">'django.contrib.auth.models.AnonymousUser'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 未认证用户使用的Token值</span>    <span class="token string">'UNAUTHENTICATED_TOKEN'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># View configuration</span>    <span class="token string">'VIEW_NAME_FUNCTION'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.views.get_view_name'</span><span class="token punctuation">,</span>    <span class="token string">'VIEW_DESCRIPTION_FUNCTION'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.views.get_view_description'</span><span class="token punctuation">,</span>    <span class="token string">'NON_FIELD_ERRORS_KEY'</span><span class="token punctuation">:</span> <span class="token string">'non_field_errors'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># Testing</span>    <span class="token string">'TEST_REQUEST_RENDERER_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.renderers.MultiPartRenderer'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.renderers.JSONRenderer'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'TEST_REQUEST_DEFAULT_FORMAT'</span><span class="token punctuation">:</span> <span class="token string">'multipart'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># Hyperlink settings</span>    <span class="token string">'URL_FORMAT_OVERRIDE'</span><span class="token punctuation">:</span> <span class="token string">'format'</span><span class="token punctuation">,</span>    <span class="token string">'FORMAT_SUFFIX_KWARG'</span><span class="token punctuation">:</span> <span class="token string">'format'</span><span class="token punctuation">,</span>    <span class="token string">'URL_FIELD_NAME'</span><span class="token punctuation">:</span> <span class="token string">'url'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># Encoding</span>    <span class="token string">'UNICODE_JSON'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'COMPACT_JSON'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'STRICT_JSON'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'COERCE_DECIMAL_TO_STRING'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'UPLOADED_FILES_USE_URL'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># Browseable API</span>    <span class="token string">'HTML_SELECT_CUTOFF'</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token string">'HTML_SELECT_CUTOFF_TEXT'</span><span class="token punctuation">:</span> <span class="token string">"More than &amp;#123;count&amp;#125; items..."</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># Schemas</span>    <span class="token string">'SCHEMA_COERCE_PATH_PK'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'SCHEMA_COERCE_METHOD_NAMES'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'retrieve'</span><span class="token punctuation">:</span> <span class="token string">'read'</span><span class="token punctuation">,</span>        <span class="token string">'destroy'</span><span class="token punctuation">:</span> <span class="token string">'delete'</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h4 id="1-4创建user-serializer-py写序列化器"><a href="#1-4创建user-serializer-py写序列化器" class="headerlink" title="1.4创建user/serializer.py写序列化器"></a>1.4创建user/serializer.py写序列化器</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">def</span> <span class="token function">address_validate</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 独立校验器</span>    <span class="token comment" spellcheck="true"># raise serializer.ValidationError(‘请填写实际地址’) # 有错就抛出异常</span>    <span class="token comment" spellcheck="true"># 没错就返回数据</span>    <span class="token keyword">return</span> data<span class="token keyword">class</span> <span class="token class-name">UserSerializer</span> <span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1.独立校验器：重新设定字段，替掉模型中的设定，重新设定地址的长度最小为5</span>    address <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span>min_length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>address_validate<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#2.单一字段验证，验证地址</span>    <span class="token keyword">def</span> <span class="token function">validate_address</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">'测试'</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'请填写实际地址'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 有错就抛出异常</span>        <span class="token keyword">return</span> data <span class="token comment" spellcheck="true"># 没错返回结果</span>    <span class="token keyword">def</span> <span class="token function">validate_phone</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 不符合手机号格式</span>        <span class="token comment" spellcheck="true"># raise serializer.ValidationError("手机号格式不正确")</span>            model  <span class="token operator">=</span>self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>Meta<span class="token punctuation">.</span>model            num <span class="token operator">=</span> model<span class="token punctuation">.</span>object<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>phone<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span>  serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'手机好已存在'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> data    <span class="token comment" spellcheck="true"># 3. 所以属性验证器</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># attrs:&amp;#123;“user”:“zhangsan”,"phone":"17563734847",...&amp;#125;</span>        <span class="token comment" spellcheck="true"># 所有属性验证器</span>        <span class="token comment" spellcheck="true"># self.context中有request和view上下午</span>        <span class="token comment" spellcheck="true"># attrs 是需要序列化的数据</span>        <span class="token comment" spellcheck="true"># raise serializer.ValidationsError('xxx.错误') # 有问题报错</span>        <span class="token keyword">return</span> attrs <span class="token comment" spellcheck="true"># 没问题返回数据</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        <span class="token comment" spellcheck="true"># fields = ('id') # 临时添加字段也需要写在这里</span>        fields <span class="token operator">=</span> <span class="token string">'__all__'</span> <span class="token comment" spellcheck="true"># 所有字段</span>        <span class="token comment" spellcheck="true"># exclude = ['id'] # 排除id字段</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 指定字段为 read_only,</span>        <span class="token comment" spellcheck="true"># 扩展address：extra_kwargs = &amp;#123;&amp;#125; # 局部替换某些字段，或者新增设定</span>        extra_kwargs <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">'min_length'</span> <span class="token punctuation">:</span><span class="token number">5</span> <span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 给地址增加最小长度限制</span>                <span class="token string">'default'</span> <span class="token punctuation">:</span><span class="token string">'默认测试地址'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 增加默认值</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h4 id="2-DRF认证、权限、限流、分页、过滤、序列化-排序"><a href="#2-DRF认证、权限、限流、分页、过滤、序列化-排序" class="headerlink" title="2.DRF认证、权限、限流、分页、过滤、序列化 排序"></a>2.DRF认证、权限、限流、分页、过滤、序列化 排序</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> include<span class="token punctuation">,</span>path<span class="token keyword">from</span> user <span class="token keyword">import</span> views<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> SimpleRouter<span class="token punctuation">,</span>DefaultRouter<span class="token comment" spellcheck="true"># 自动生产路由方法，必须使用视图集</span><span class="token comment" spellcheck="true"># router = SimpleRouter（） # 没有跟根路由 /user/ 无法识别</span>router <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 有跟路由</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span>r<span class="token string">'user'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>UserViewSet<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 配置路由</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'index/'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'api-auth/'</span><span class="token punctuation">,</span>include<span class="token punctuation">(</span><span class="token string">'rest_framework.urls'</span><span class="token punctuation">,</span>namespace<span class="token operator">=</span><span class="token string">'res_framework'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 认证地址</span><span class="token punctuation">]</span>urlpatterns<span class="token operator">+=</span> router<span class="token punctuation">.</span>urls <span class="token comment" spellcheck="true"># 模块地址</span></code></pre><h4 id="2-2-编写user-views-py"><a href="#2-2-编写user-views-py" class="headerlink" title="2.2 编写user/views.py"></a>2.2 编写user/views.py</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django_filters<span class="token punctuation">.</span>rest_framework <span class="token keyword">import</span> DjangoFilterBackend<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> BasicAuthentication<span class="token punctuation">,</span>SessionAuthentication<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> action<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>filters <span class="token keyword">import</span> OrderingFilter<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> AllowAny<span class="token punctuation">,</span>IsAdminUser<span class="token punctuation">,</span>IsAuthenticated<span class="token punctuation">,</span>IsAuthenticatedOrReadOnly<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>throttling <span class="token keyword">import</span> UserRateThrottle<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>pagination <span class="token keyword">import</span> PageNumberPagination<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> BasePermission<span class="token punctuation">,</span>SAFE_METHODS<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> user<span class="token punctuation">.</span>serializer <span class="token keyword">import</span> UserSerializer<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#需要认证才能访问的视图</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'HELLO'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分页（局部）: 自定义分液器，局部</span><span class="token keyword">class</span> <span class="token class-name">PageNum</span><span class="token punctuation">(</span>PageNumberPagination<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 查询字符串中代表每页返回数据量的参数名，默认值：None</span>    page_size_query_param <span class="token operator">=</span>  <span class="token string">'page_size'</span>    <span class="token comment" spellcheck="true"># 查询字符串中代表页码的参数名，有默认值：page</span>    <span class="token comment" spellcheck="true"># page_query_param = 'page'</span>    <span class="token comment" spellcheck="true"># 一页中最多的结果条数</span>    max_page_size <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 自定义权限(局部）</span><span class="token keyword">class</span> <span class="token class-name">MyPermission</span><span class="token punctuation">(</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">has_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span>kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pk'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span>        <span class="token triple-quoted-string string">'''判断用户对模型有没有访问权限'''</span>        <span class="token comment" spellcheck="true"># 任何用户对使用此类权限的视图都有访问权限</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_superuser<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 管理员对用户模型有访问权限</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">elif</span> view<span class="token punctuation">.</span>kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pk'</span><span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 携带的id和用户的id相同时有访问权限</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">has_object_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''获取单个数据时，判断用户对某个数据对象时否有访问权限'''</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id <span class="token operator">==</span> obj<span class="token punctuation">.</span>id<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    完成产品的增删改查    """</span>    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> UserSerializer <span class="token comment" spellcheck="true"># 优先使用 get_serializer_class 返回的序列化器</span>    <span class="token comment" spellcheck="true"># # 1.认证： 自定义认证类，自定义会覆盖全局配置</span>    <span class="token comment" spellcheck="true"># authentication_classes = (BasicAuthentication,SessionAuthentication)</span>    <span class="token comment" spellcheck="true"># # 2.权限认证： 自定义权限类</span>    <span class="token comment" spellcheck="true"># permission_classes = (MyPermission)</span>    <span class="token comment" spellcheck="true">#3.分页： 自定义分页器  覆盖全局配置</span>    pagination_class <span class="token operator">=</span> PageNum    <span class="token comment" spellcheck="true"># 4.限流：自定义限流类</span>    parser_classes <span class="token operator">=</span> <span class="token punctuation">[</span>UserRateThrottle<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#5. 过滤： 指定过滤方法类，拍下方法类，一个或多个</span>    filter_backends <span class="token operator">=</span>  <span class="token punctuation">(</span>DjangoFilterBackend<span class="token punctuation">,</span>OrderingFilter<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 同时支持过滤和排序</span>    <span class="token comment" spellcheck="true"># 5.1 指定排序字段，不设置，排序功能不起效</span>    ordering_fileds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'date_joined'</span><span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ?ordering = -id</span>    <span class="token comment" spellcheck="true"># 5.2指定过过滤字段，不设置，过滤功能不起效</span>    filter_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'phone'</span><span class="token punctuation">,</span><span class="token string">'is_active'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#?username = tom&amp;phone=is_active=tur</span>    <span class="token comment" spellcheck="true"># # 根据不同的请求，获得不同的序列化器</span>    <span class="token comment" spellcheck="true"># def get_serializer_class(self):</span>    <span class="token comment" spellcheck="true">#     if self.action == 'unactived':</span>    <span class="token comment" spellcheck="true">#         return UserUnActiveSerializer</span>    <span class="token comment" spellcheck="true">#     else:</span>    <span class="token comment" spellcheck="true">#         return UserSerializer</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios的封装</title>
      <link href="2020/11/01/axios-feng-zhuang/"/>
      <url>2020/11/01/axios-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="axios的封装"><a href="#axios的封装" class="headerlink" title="axios的封装"></a>axios的封装</h2><ol><li><p>src文件夹下新建http文件夹，用来放网络请求相关的文件</p></li><li><p><code>src/http</code>文件夹下，创建<code>index.js</code>文件，对axios进行封装</p></li></ol><pre class=" language-javascript"><code class="language-javascript">   <span class="token keyword">const</span> axios<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建axios对象</span>   axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL<span class="token operator">=</span><span class="token string">'http://127.0.0.1:8000/'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//vue请求后端地址</span>   axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//多久超时</span>    axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//携带cookie需要添加</span>   <span class="token comment" spellcheck="true">/**    * 设置请求传递数据的格式（看服务器要求的格式）    * x-www-form-urlencoded    * 默认提交表单    * 把数据对象序列化成 表单数据    */</span>   <span class="token comment" spellcheck="true">//axios.default.headers['Content-Type']='application/x-www-form-urlencoded';</span>   <span class="token comment" spellcheck="true">//axios.default.transformRequest=data =>qs.stringify(data);</span>   <span class="token comment" spellcheck="true">/**    *设置默认提交JSON    * 把数据对象序列化成json字符串    */</span>   axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'application/json'</span><span class="token punctuation">;</span>   axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>transformRequest<span class="token operator">=</span> data <span class="token operator">=</span><span class="token operator">></span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//请求拦截器</span>   axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>config<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//从localStorage获取token</span>     <span class="token keyword">let</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//如果有token,就把token设置到请求头中Authorization字段中</span>     token <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization<span class="token operator">=</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> config<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>error<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//响应拦截器</span>   axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>response<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//当响应码 2xx的情况，进入这里</span>     <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//当相应码不是2xx的情况，进入这里</span>     <span class="token keyword">return</span> error     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//get方法，对应get请求</span>   <span class="token comment" spellcheck="true">//@params&amp;#123;String&amp;#125; url[请求的url地址]</span>   <span class="token comment" spellcheck="true">//@params&amp;#123;Object&amp;#125; params[请求时携带的参数]</span>   <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span>headers<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>params<span class="token punctuation">,</span>headers<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token function">      resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ResultObj<span class="token punctuation">)</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token function">      reject</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>data<span class="token punctuation">)</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//post方法，对应post请求</span>   <span class="token keyword">export</span> <span class="token keyword">function</span><span class="token function"> post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span>headers<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token function">        resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token function">        reject</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>data<span class="token punctuation">)</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">export</span> <span class="token keyword">default</span> axios<span class="token punctuation">;</span></code></pre><ol start="3"><li><p><code>src/http</code>目录下创建apis.js文件，用来写接口地址列表</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//接口信息，生成请求方法</span><span class="token comment" spellcheck="true">//请求后端django的地址</span><span class="token comment" spellcheck="true">//引入get方法，post方法</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">get</span><span class="token punctuation">,</span>post<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./index'</span><span class="token comment" spellcheck="true">//用户登录</span><span class="token keyword">export</span> <span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token punctuation">,</span>headers<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/login/"</span><span class="token punctuation">,</span>params<span class="token punctuation">,</span>headers<span class="token punctuation">)</span></code></pre></li></ol><h2 id="CORS跨域"><a href="#CORS跨域" class="headerlink" title="CORS跨域"></a>CORS跨域</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#允许所有源来跨域</span>CORS_ORIGIN_ALLOW_ALL <span class="token operator">=</span><span class="token boolean">True</span><span class="token comment" spellcheck="true">#或者设置跨域请求白名单</span><span class="token comment" spellcheck="true"># CORS_ORIGIN_WHITELIST = (</span><span class="token comment" spellcheck="true">#     'http://127.0.0.1:8080',</span><span class="token comment" spellcheck="true">#     'http://localhost:8080',</span><span class="token comment" spellcheck="true"># )</span><span class="token comment" spellcheck="true">#允许携带cookie</span>CORS_ALLOW_CREDENTALS <span class="token operator">=</span> <span class="token boolean">True</span></code></pre><h2 id="前后端联调思路"><a href="#前后端联调思路" class="headerlink" title="前后端联调思路"></a>前后端联调思路</h2><ol><li>写完视图函数，使用postman进行接口测试，保证后端接口没有问题</li><li>在vue中写页面，向后端发送数据</li></ol><pre class=" language-python"><code class="language-python">const <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; data &amp;#125; = require('autoprefixer');</span>const axios <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>const <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; error &amp;#125; = require('shelljs');</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://192.168.56.100:8888'</span> <span class="token operator">//</span>vue请求后端地址axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token operator">//</span> 超时设置axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> true<span class="token punctuation">;</span> <span class="token operator">//</span> 跨域访问需要发送cookie时，一定要加上axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/json'</span><span class="token punctuation">;</span> <span class="token operator">//</span>设置默认提交jsonaxios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>transformRequest <span class="token operator">=</span> data <span class="token operator">=</span><span class="token operator">></span> JSON<span class="token punctuation">.</span>stringify<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">//</span>把数据对象序列化成json字符串<span class="token operator">//</span> 对请求拦截器，和响应拦截器进行封装<span class="token operator">/</span><span class="token operator">*</span>请求拦截器，发送请求前需要调用这个函数当没有登录时，直接跳转到登录页请求发送前把token获取，设置到header中<span class="token operator">*</span><span class="token operator">/</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span>use<span class="token punctuation">(</span>config<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token operator">//</span>从localStorage中获取token    let token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span>getItem<span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">//</span> 如果有token，就把token设置到请求头中Authorization字段中    token <span class="token operator">&amp;</span><span class="token operator">&amp;</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorzation <span class="token operator">=</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,error => &amp;#123;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span>reject<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span><span class="token operator">/</span><span class="token operator">*</span>响应拦截器，当后端返回数据给vue时，会调用这个函数每次返回<span class="token number">403</span>错误时，跳转到login<span class="token operator">*</span><span class="token operator">/</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span>use<span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token operator">//</span>当响应码是2xx的情况时，进入这里    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,error =>&amp;#123;</span>    <span class="token operator">//</span>当响应码不是2xx的情况是，进入这里    <span class="token keyword">return</span> error<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span><span class="token operator">//</span>使用上面的axios对象，对get和post请求进行封装<span class="token operator">/</span><span class="token operator">*</span>get方法，对应get请求@param <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;String&amp;#125; url [请求的url地址]</span>@param <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;Object&amp;#125; params [请求时携带的参数]</span><span class="token operator">*</span><span class="token operator">/</span>export function get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> new Promise<span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        axios<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;params,headers&amp;#125;).then(res=>&amp;#123;</span>            resolve<span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ResulObj<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;).catch(err =>&amp;#123;</span>            reject<span class="token punctuation">(</span>err<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">/</span><span class="token operator">*</span>post方法，对应post请求@param <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;String&amp;#125; url [请求的url地址]</span>@param <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;Object&amp;#125; params [请求时携带的参数]</span><span class="token operator">*</span><span class="token operator">/</span>export function post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> new Promise<span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        axios<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>then<span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            resolve<span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;).catch(err =>&amp;#123;</span>            reject<span class="token punctuation">(</span>err<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">//</span>一定要导出函数export default axios<span class="token punctuation">;</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    body_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>request<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    name <span class="token operator">=</span> body_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    pwd <span class="token operator">=</span> body_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span>pwd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        resp <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'code'</span><span class="token punctuation">:</span><span class="token number">1001</span><span class="token punctuation">,</span>            <span class="token string">'msg'</span><span class="token punctuation">:</span><span class="token string">'信息不全'</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>resp<span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'天听'</span> <span class="token operator">and</span> pwd <span class="token operator">==</span> <span class="token string">'123456'</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">"code"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>            <span class="token string">"msg"</span><span class="token punctuation">:</span><span class="token string">"登录成功"</span><span class="token punctuation">,</span>            <span class="token string">"data"</span><span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">"id"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"tianting"</span><span class="token punctuation">,</span>                <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">20</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">"code"</span><span class="token punctuation">:</span><span class="token number">1002</span><span class="token punctuation">,</span>        <span class="token string">"msg"</span><span class="token punctuation">:</span><span class="token string">'用户名或密码错误'</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> Vue </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis中pipline的使用</title>
      <link href="2020/11/01/redis-de-pipline-shi-yong/"/>
      <url>2020/11/01/redis-de-pipline-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>redis<strong>发送数据原理</strong></p><ul><li><p>Redis是建立在TCP协议基础上的CS架构，客户端client对redis server采取请求响应的方式交互。</p></li><li><p>一般来说客户端从提交请求到得到服务器相应，需要传送两个tcp报文。</p></li><li><p>设想这样的一个场景，你要批量的执行一系列redis命令，例如执行100次get key，这时你要向redis</p><p>请求100次+获取响应100次。如果能一次性将100个请求提交给redis server，执行完成之后批量的获</p><p>取相应，只需要向redis请求1次，然后批量执行完命令，一次性结果，性能是不是会好很多呢？</p></li></ul><p><strong>未使用</strong>pipeline<strong>执行</strong>N<strong>条命令</strong></p><img src="/2020/11/01/redis-de-pipline-shi-yong/20201008110134859.png" class><p><strong>使用了</strong>pipeline<strong>执行</strong>N<strong>条命令</strong></p><img src="/2020/11/01/redis-de-pipline-shi-yong/20201008110151342.png" class><p>pipeline<strong>性能代码展示</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django_redis <span class="token keyword">import</span> get_redis_connectionredis_client <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''普通方法执行'''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">99999</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    redis_client<span class="token punctuation">.</span>set<span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''使用pipeline执行'''</span>    p1 <span class="token operator">=</span> redis_client<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 实例化一个pipeline对象</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">99999</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p1<span class="token punctuation">.</span>set<span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span>p1<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>倒排索引与全文检索</title>
      <link href="2020/10/30/dao-pai-suo-yin-yu-quan-wen-jian-suo/"/>
      <url>2020/10/30/dao-pai-suo-yin-yu-quan-wen-jian-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h1><hr><blockquote><p>一个未经处理的数据库中，一般是以文档ID作为索引，文档内容作为记录</p><p>而倒排索引指的是，将单词或记录作为索引，将文档ID作为记录，这样便可以方便地通过索引来查找到其所在的文档</p></blockquote><p>例如：</p><img src="/2020/10/30/dao-pai-suo-yin-yu-quan-wen-jian-suo/image-20201016112650646.png" class><ul><li>简单来说，普通的查询检索是通过文档查找关键词，而倒排索引就是通过关键词找到文档</li></ul><h4 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h4><p>将数据库中的<strong>结构化数据</strong>数据转换为<strong>非结构化</strong>数据</p><p>然后将<strong>非结构化数据</strong>转化为分词结构</p><hr><h1 id="Django使用haystack"><a href="#Django使用haystack" class="headerlink" title="Django使用haystack"></a><code>Django</code>使用haystack</h1><ul><li><p>haystack是<code>django</code>的开源搜索框架，该框架支持 <code>Solr,Elasticsearch,Whoosh, Xapian</code>搜索引擎，不用更改代码，直接切换引擎，减少代码量。</p></li><li><p>搜索引擎使用Whoosh，这是一个由纯Python实现的全文搜索引擎，没有二进制文件等，比较小</p><p>巧，配置比较简单，当然性能自然略低。</p></li><li><p>中文分词<code>Jieba</code>，由于Whoosh自带的是英文分词，对中文的分词支持不是太好，故用jieba替换</p><p>whoosh的分词组件。</p></li></ul><h4 id="配置与使用："><a href="#配置与使用：" class="headerlink" title="配置与使用："></a>配置与使用：</h4><p><code>syl/settings.py</code> <strong>全文检索配置</strong> </p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''1.注册app '''</span> INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token string">'haystack'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># haystack要放在应用的上面 </span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''2.模板路径 '''</span>TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'DIRS'</span><span class="token punctuation">:</span><span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'templates'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''3.全文检索配置'''</span>HAYSTACK_SEARCH_RESULTS_PER_PAGE <span class="token operator">=</span> <span class="token number">15</span> <span class="token comment" spellcheck="true"># 搜索出多条数据时需要分页</span>HAYSTACK_CONNECTIONS <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'course.whoosh_cn_backend.MyWhooshEngine'</span><span class="token punctuation">,</span>        <span class="token string">'PATH'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'whoosh_index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 指定倒排索引存放位置</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># # ES引擎 </span><span class="token comment" spellcheck="true"># HAYSTACK_CONNECTIONS = &amp;#123; </span><span class="token comment" spellcheck="true"># 'default': &amp;#123;</span>        <span class="token comment" spellcheck="true"># 'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine', </span>        <span class="token comment" spellcheck="true"># 'URL': 'http://10.211.55.15:9200/',  # Elasticsearch服务器ip地址，端口号固 定为9200 </span>        <span class="token comment" spellcheck="true"># 'INDEX_NAME': 'syl', # Elasticsearch建立的反向索引库的名称 </span>        <span class="token comment" spellcheck="true"># &amp;#125;, </span><span class="token comment" spellcheck="true"># &amp;#125; </span><span class="token comment" spellcheck="true"># 添加此项，当数据库改变时，会自动更新索引，非常方便 </span>HAYSTACK_SIGNAL_PROCESSOR <span class="token operator">=</span> <span class="token string">'haystack.signals.RealtimeSignalProcessor'</span></code></pre><ul><li><strong>子应用下创建索引文件<code>apps/course/search_indexes.py</code></strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># apps/course/search_indexes.py</span><span class="token comment" spellcheck="true"># 文件名必须是 search_indexes.py</span><span class="token keyword">from</span> haystack <span class="token keyword">import</span> indexes<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Course<span class="token comment" spellcheck="true"># 修改此处，类名为模型类的名称+Index，比如模型类为GoodsInfo,则这里类名为GoodsInfoIndex(其 实可以随便写)</span><span class="token keyword">class</span> <span class="token class-name">CourseIndex</span><span class="token punctuation">(</span>indexes<span class="token punctuation">.</span>SearchIndex<span class="token punctuation">,</span> indexes<span class="token punctuation">.</span>Indexable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" Course索引类 """</span>    <span class="token comment" spellcheck="true"># text为索引字段 # document = True，这代表haystack和搜索引擎将使用此字段的内容作为索引进行检索</span>    <span class="token comment" spellcheck="true"># use_template=True 指定根据表中的那些字段建立索引文件的说明放在一个文件中</span>    text <span class="token operator">=</span> indexes<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>document<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> use_template<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对那张表进行查询</span>    <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 重载get_model方法，必须要有</span>        <span class="token triple-quoted-string string">"""返回建立索引的模型类"""</span>        <span class="token keyword">return</span> Course   <span class="token comment" spellcheck="true"># 返回这个model</span>    <span class="token comment" spellcheck="true"># 建立索引的数据</span>    <span class="token keyword">def</span> <span class="token function">index_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> using<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""返回要建立索引的数据查询集"""</span>        <span class="token comment" spellcheck="true"># 这个方法返回什么内容，最终就会对那些方法建立索引，这里是对所有字段建立索引</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><strong>指定索引模板文件</strong></li></ul><p><code>templates/search/indexes/course/course_text.txt </code></p><p><code>创建文件路径命名必须这个规范：templates/search/indexes/应用名称/模型类名称 text.txt</code></p><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#123;object.id&amp;#125;&amp;#125; </span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#123;object.title&amp;#125;&amp;#125; </span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#123;object.desc&amp;#125;&amp;#125;</span></code></pre><ul><li><strong>修改为<code>jieba</code>分词中的中文分析器</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># apps/course/whoosh_cn_backend.py</span><span class="token comment" spellcheck="true"># 更换 text 字段的 分析方式, 变为jieba分词中的中文分析器</span><span class="token keyword">from</span> haystack<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>whoosh_backend <span class="token keyword">import</span> WhooshEngine<span class="token punctuation">,</span> WhooshSearchBackend<span class="token keyword">from</span> whoosh<span class="token punctuation">.</span>fields <span class="token keyword">import</span> TEXT<span class="token keyword">from</span> jieba<span class="token punctuation">.</span>analyse <span class="token keyword">import</span> ChineseAnalyzer<span class="token keyword">class</span> <span class="token class-name">MyWhooshSearchBackend</span><span class="token punctuation">(</span>WhooshSearchBackend<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">build_schema</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>content_field_name<span class="token punctuation">,</span> schema<span class="token punctuation">)</span> <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>build_schema<span class="token punctuation">(</span>fields<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 指定whoosh使用jieba进行分词</span>        schema<span class="token punctuation">.</span>_fields<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> TEXT<span class="token punctuation">(</span>stored<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                      analyzer<span class="token operator">=</span>ChineseAnalyzer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                      field_boost<span class="token operator">=</span>fields<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>boost<span class="token punctuation">,</span>                                      sortable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>content_field_name<span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyWhooshEngine</span><span class="token punctuation">(</span>WhooshEngine<span class="token punctuation">)</span><span class="token punctuation">:</span>    backend <span class="token operator">=</span> MyWhooshSearchBackend</code></pre><ul><li><strong>课程全文检索接口视图函数</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># course/views.py</span><span class="token keyword">from</span> syl <span class="token keyword">import</span> settings <span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>paginator <span class="token keyword">import</span> InvalidPage<span class="token punctuation">,</span> Paginator <span class="token keyword">from</span> haystack<span class="token punctuation">.</span>forms <span class="token keyword">import</span> ModelSearchForm <span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> JsonResponse<span class="token comment" spellcheck="true"># 如果settings.py中配置就是用settings中配置的，否则就每页15条</span>RESULTS_PER_PAGE <span class="token operator">=</span> getattr<span class="token punctuation">(</span>settings<span class="token punctuation">,</span> <span class="token string">'HAYSTACK_SEARCH_RESULTS_PER_PAGE'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">course_index_search</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    query <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>    page <span class="token operator">=</span> int<span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第几页</span>    page_size <span class="token operator">=</span> int<span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page_size'</span><span class="token punctuation">,</span> RESULTS_PER_PAGE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 每页多少条</span>    <span class="token keyword">if</span> query<span class="token punctuation">:</span>        form <span class="token operator">=</span> ModelSearchForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">,</span> load_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将查询条件传递给查询对 象</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            results <span class="token operator">=</span> form<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 查询出来的最终数据</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"code": 404, "msg": 'No file found！', "data": []&amp;#125;)</span>    <span class="token comment" spellcheck="true"># 对结果集进行分页</span>    paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>results<span class="token punctuation">,</span> page_size<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        page <span class="token operator">=</span> paginator<span class="token punctuation">.</span>page<span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 从分好的页中拿第几页</span>    <span class="token keyword">except</span> InvalidPage<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果分页出错</span>        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"code": 404, "msg": 'No file found！', "data": []&amp;#125;)</span>    jsondata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> page<span class="token punctuation">.</span>object_list<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 分页后的课程查询结果</span>        data <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'id'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span>object<span class="token punctuation">.</span>id<span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span>object<span class="token punctuation">.</span>title<span class="token punctuation">,</span>            <span class="token string">'desc'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span>object<span class="token punctuation">.</span>desc<span class="token punctuation">,</span>            <span class="token string">'img'</span><span class="token punctuation">:</span>                request<span class="token punctuation">.</span>scheme <span class="token operator">+</span> <span class="token string">'://'</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>META<span class="token punctuation">[</span><span class="token string">'HTTP_HOST'</span><span class="token punctuation">]</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>object<span class="token punctuation">.</span>img<span class="token punctuation">.</span>url<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># 'follower': result.object.follower,</span>            <span class="token string">'learner'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span>object<span class="token punctuation">.</span>learner<span class="token punctuation">,</span>            <span class="token string">'status'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span>object<span class="token punctuation">.</span>status<span class="token punctuation">,</span>            <span class="token string">'course_type'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span>object<span class="token punctuation">.</span>course_type<span class="token punctuation">.</span>id        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        jsondata<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>        <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'Search successfully！'</span><span class="token punctuation">,</span>        <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"count": page.paginator.count, "results": jsondata&amp;#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><ul><li><strong><code>syl/urls.py</code>添加路由</strong></li></ul><pre class=" language-python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     path<span class="token punctuation">(</span><span class="token string">'search/'</span><span class="token punctuation">,</span> course_index_search<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span></code></pre><ul><li><strong>命令创建倒排索引</strong></li></ul><pre class=" language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py rebuild_index</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 全文检索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ModelViewSet</title>
      <link href="2020/10/30/modelviewset/"/>
      <url>2020/10/30/modelviewset/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>ModelViewSet是封装度最高的DRF的视图类。包含了怎删改查中的所有接口操作。</p></blockquote><blockquote><p>它继承自<code>GenericViewSet</code>、ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。</p><p><strong>！！！！！注意，因为继承关系，必须在内部定义属性，queryset和serializer_class，因此，ModelViewSet通常结合ModelSerializer使用</strong></p></blockquote><blockquote><p>所以，在使用ModelViewSet定义API时，我们只需要套用模板即可</p></blockquote><p>使用视图集，可以将一系列逻辑相关的动作放到一个类中：</p><ul><li>list() 提供一组数据</li><li>retrieve() 提供单个数据</li><li>create() 创建数据</li><li>update() 更新数据</li><li>destory() 删除数据</li></ul><blockquote><p>视图集类不再实现get()、post()、put()、delete()方法，而是实现动作 <strong>action</strong>。 如 list()、retrieve()、create()、update()、destory()</p></blockquote><table><thead><tr><th>请求</th><th>url</th><th>对应方法</th><th>备注</th></tr></thead><tbody><tr><td>get</td><td>127.0.0.1:8000/app01/book/</td><td>list</td><td>ListModelMixin</td></tr><tr><td>get</td><td>127.0.0.1:8000/app01/book/{1}/</td><td>retrieve</td><td>….Mixin</td></tr><tr><td>post</td><td>127.0.0.1:8000/app01/book/</td><td>create</td><td>….Mixin</td></tr><tr><td>put</td><td>127.0.0.1:8000/app01/book/{1}/</td><td>update</td><td>….Mixin</td></tr><tr><td>detete</td><td>127.0.0.1:8000/app01/book/{1}/</td><td>destroy</td><td>….Mixin</td></tr><tr><td>get</td><td>127.0.0.1:8000/app01/book/ user_action</td><td>useraction</td><td>自定义</td></tr><tr><td>post</td><td>127.0.0.1:8000/app01/book/ user_action</td><td>useraction</td><td>自定义</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#views中</span><span class="token keyword">class</span> <span class="token class-name">BookInfoViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""增删改查图书信息"""</span>    <span class="token comment" spellcheck="true"># 指定查询集</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 指定序列化器</span>    serializer_class <span class="token operator">=</span> BookInfoModelSerializer</code></pre><blockquote><p>定义好了API视图后，需要在路由中，将请求方法与action进行绑定</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span>include<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views<span class="token comment" spellcheck="true">#导入路由控制类</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> SimpleRouter<span class="token punctuation">,</span>DefaultRouter<span class="token comment" spellcheck="true">#实例化路由控制对象</span>router <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#注册</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span>r<span class="token string">'book'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#编写路由，固定写法，不清楚是否还有其他写法</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">''</span><span class="token punctuation">,</span>include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="action-自定义方法"><a href="#action-自定义方法" class="headerlink" title="action(自定义方法)"></a>action(自定义方法)</h3><blockquote><p>DRF框架提供的action根本不能满足某些无良老板的奇葩需求,这时候，就需要自定义<code>action</code></p></blockquote><blockquote><p>只需要在ModelViewSet定义的api类中，自定action函数后，再将自定义的函数在路由中绑定即可</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        自定义action        return: JSON数据        '''</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true">#示例：</span><span class="token keyword">def</span> <span class="token function">latest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''获取最后一条记录'''</span>    <span class="token comment" spellcheck="true"># 获取模型数据</span>    book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>latest<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取序列化器对象</span>    s <span class="token operator">=</span> BookInfoModelSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>book<span class="token punctuation">)</span>    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#路由</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^books/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'get':'action函数名'&amp;#125;)),</span>    <span class="token comment" spellcheck="true">#示例：</span>url<span class="token punctuation">(</span>r<span class="token string">'^books/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'get':'latest'&amp;#125;)),</span><span class="token punctuation">]</span></code></pre><blockquote><p>之后，使用<code>http://127.0.0.1:8000/app01/books/</code>进行测试</p></blockquote><p>或者使用装饰器方法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> action@action<span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'get'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>detail<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>url_path<span class="token operator">=</span><span class="token string">'bookw'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">use</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'天听'&amp;#125;)</span><span class="token triple-quoted-string string">'''http://127.0.0.1:8000/app01/book/bookw/如果不加url_path，路由就成了http://127.0.0.1:8000/app01/book/use/'''</span></code></pre><blockquote><p>注意，此写法不需要再注册路由，需要在装饰器内部进行定义<br><code>url_path</code><br>如果不定义<code>url_path</code>，路由默认为函数名</p><p><code>detail=False</code>表示不需要匹配主键的正则，函数不需要传入主键就设为False</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件</title>
      <link href="2020/10/30/vue-zu-jian/"/>
      <url>2020/10/30/vue-zu-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="1-组件定义"><a href="#1-组件定义" class="headerlink" title="1.组件定义"></a>1.组件定义</h2><ol><li><p>定义组件并引用 </p></li><li><p>父组件向子组件传值 </p></li><li><p>子组件向父组件传值 </p></li></ol><p>组件间传值：<a href="https://www.cnblogs.com/xiaonq/p/9697921.html">vuex</a></p><hr><h4 id="1-1-什么是组件"><a href="#1-1-什么是组件" class="headerlink" title="1.1  什么是组件"></a>1.1  什么是组件</h4><ul><li><code>Html</code>中有组件，是一段可以被复用的结构代码</li><li>Css中有组件，是一段可以被复用的样式</li><li>Js中有组件，是一段可以被复用的功能</li><li>Vue中的组件，指的就是一个模块，是一个独立的，完整的(包含<code>html，cssm，js</code>等)，可以直接拿来用</li></ul><h4 id="1-2-组件特性"><a href="#1-2-组件特性" class="headerlink" title="1.2  组件特性"></a>1.2  组件特性</h4><ul><li><p>组件的实例化对象，跟<code>vue</code>实例化对象一样，因此，我们也可以将<code>vue</code>实例化对象看成组件</p></li><li><p>组件间是独立的，因此数据要独立存储，方法要独立定义， **彼此间不能共享 **。</p></li></ul><hr><h2 id="2-父组件向子组件传值"><a href="#2-父组件向子组件传值" class="headerlink" title="2.父组件向子组件传值"></a>2.父组件向子组件传值</h2><h5 id="2-1-components-Child-vue-定义子组件"><a href="#2-1-components-Child-vue-定义子组件" class="headerlink" title="2.1  components/Child.vue 定义子组件"></a>2.1  <code>components/Child.vue</code> <strong>定义子组件</strong></h5><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"color: red"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>子组件内容<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>         <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>data<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span> <span class="token operator">&lt;</span>script<span class="token operator">></span>     <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 接收父组件给子组件定义的属性 </span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p>子组件要使用父组件的数据，只需要一步，在 props中接收父组件的属性</p></blockquote><h5 id="2-2-components-Father-vue-定义父组件"><a href="#2-2-components-Father-vue-定义父组件" class="headerlink" title="2.2   components/Father.vue 定义父组件"></a>2.2   <code>components/Father.vue</code> <strong>定义父组件</strong></h5><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>     <span class="token operator">&lt;</span>div<span class="token operator">></span>         <span class="token operator">&lt;</span>h1<span class="token operator">></span>父组件内容<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>         父组件显示<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>msg<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">3</span><span class="token punctuation">.</span>第三步：把父组件的某一个属性传递给子组件<span class="token operator">--</span><span class="token operator">></span>         <span class="token operator">&lt;</span>Child <span class="token punctuation">:</span>data<span class="token operator">=</span><span class="token string">'msg'</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span> <span class="token operator">&lt;</span>script<span class="token operator">></span>     <span class="token comment" spellcheck="true">// @指定的是src路径 </span>    <span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'@/components/Child'</span>     <span class="token comment" spellcheck="true">// 1.第一步：在父组件中导入子组件 </span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 2.第二步：父组件中注册子组件 </span>        components<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             Child         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 msg<span class="token punctuation">:</span> <span class="token string">'父组件的信息'</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p><code>components</code>注册子组件</p></blockquote><h5 id="2-3-router-index-js-中注册路由"><a href="#2-3-router-index-js-中注册路由" class="headerlink" title="2.3  router/index.js 中注册路由"></a>2.3  <code>router/index.js</code> <strong>中注册路由</strong></h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Father <span class="token keyword">from</span> <span class="token string">'@/components/Father'</span> <span class="token comment" spellcheck="true">// @修饰符指的是 src目录 </span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     routes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         path<span class="token punctuation">:</span> <span class="token string">'/component'</span><span class="token punctuation">,</span>         name<span class="token punctuation">:</span> <span class="token string">'Father'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Father     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><blockquote><p>子组件中可以通过 定义 <code>props</code> 属性来接收父组件的数据</p></blockquote><h2 id="3-子组件向父组件传值"><a href="#3-子组件向父组件传值" class="headerlink" title="3.子组件向父组件传值"></a>3.<strong>子组件向父组件传值</strong></h2><h5 id="3-1-components-Child-vue-子组件通过触发方法-向父组件传值"><a href="#3-1-components-Child-vue-子组件通过触发方法-向父组件传值" class="headerlink" title="3.1  components/Child.vue 子组件通过触发方法, 向父组件传值"></a>3.1  <code>components/Child.vue</code> <strong>子组件通过触发方法, 向父组件传值</strong></h5><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>子组件页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>子组件<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>data<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"f1"</span><span class="token operator">></span>调用父<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用props接收父组件的属性</span>    props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 接收父组件给子组件定义的属性 </span>        <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//1.子组件调用父组件方法，并传值 </span><span class="token comment" spellcheck="true">// $emit 触发当前实例上的事件，也可以简单的理解为触发父组件上的事件（向上冒泡）</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'changeMsg'</span><span class="token punctuation">,</span><span class="token string">'子的信息'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="3-2-components-Father-vue给子组件添加事件及事件处理方法"><a href="#3-2-components-Father-vue给子组件添加事件及事件处理方法" class="headerlink" title="3.2 components/Father.vue给子组件添加事件及事件处理方法"></a>3.2 <code>components/Father.vue</code><strong>给子组件添加事件及事件处理方法</strong></h5><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>父组件页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>msg<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span>Child <span class="token punctuation">:</span>data<span class="token operator">=</span><span class="token string">'msg'</span> @changeMsg<span class="token operator">=</span><span class="token string">'f2'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'@/components/Child'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    components<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Child    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            msg<span class="token punctuation">:</span><span class="token string">'父的数据'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在父组件中定义一个f2方法，可以在子组件中触发并传值给父组件 </span>        <span class="token function">f2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// data接收是子组件中传递的数据</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> data<span class="token comment" spellcheck="true">// 更新父组件的内容 </span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="2020/10/30/git-ji-ben-cao-zuo/"/>
      <url>2020/10/30/git-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="配置全局："><a href="#配置全局：" class="headerlink" title="配置全局："></a>配置全局：</h2><pre class=" language-python"><code class="language-python">git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>name <span class="token string">"xxx"</span>git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>email <span class="token string">"7618733+god_hearing@user.noreply.gitee.com"</span></code></pre><h2 id="上传到仓库："><a href="#上传到仓库：" class="headerlink" title="上传到仓库："></a>上传到仓库：</h2><ol><li><p>在码云或者<code>github</code>上创建仓库</p></li><li><p>仓库初始化(在本地)<br><code>git init</code></p></li><li><p>新建<code>readme.md</code>文件:<br><code>touch README.md</code></p></li><li><p>添加到本地缓冲区(.代表全部)<br><code>git add .</code></p></li><li><p>此时，也可以查看缓冲区状态<br><code>git status</code></p></li><li><p>添加注释<br><code>git commit -m&#39;注释信息&#39;</code></p><blockquote><p>一般，注释会使用<code>+ - * </code>等符号作为前缀，代表增加，删除，改动</p></blockquote></li><li><p>添加远程仓库地址<br><code>git remote add 自定义缓存名(origin) 码云地址</code></p></li><li><p>提交代码到远程仓库<br><code>git push origin master</code></p><blockquote><p>如果提示报错，不妨先试验一下<br><code>git push -u origin master -f</code></p></blockquote></li></ol><h2 id="克隆到本地："><a href="#克隆到本地：" class="headerlink" title="克隆到本地："></a>克隆到本地：</h2><p><code>git clone 地址</code></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
